{
  "address": "0x5FbDB2315678afecb367f032d93F642f64180aa3",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "currentPhase",
          "type": "uint16"
        },
        {
          "internalType": "uint16",
          "name": "functionPhase",
          "type": "uint16"
        }
      ],
      "name": "ActionIsNotAllowedAtThisStage",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "OnlyElectionAdministratorIsAllowedAccess",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "PerformUpKeep_NotEnoughTimeHasPassed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "PhaseThree_ThereIsNoWinnerYet",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "voterAddress",
          "type": "address"
        }
      ],
      "name": "PhaseTwo_AlreadyVoted",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "voterAddress",
          "type": "address"
        }
      ],
      "name": "PhaseTwo_CandidateCannotReceiveMultipleVotesFromTheSameVoter",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "voterAddress",
          "type": "address"
        }
      ],
      "name": "PhaseTwo_VoterIsNotRegistered",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "candidateAddress",
          "type": "address"
        }
      ],
      "name": "Voting_CandidateAddressDoesNotExist",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "candidateAddress",
          "type": "address"
        }
      ],
      "name": "Voting_CandidateAlreadyExists",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "voterAddress",
          "type": "address"
        }
      ],
      "name": "Voting_VoterDoesNotExist",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "voterAddress",
          "type": "address"
        }
      ],
      "name": "Voting_VoterIsAlreadyRegistered",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "walletAddress",
          "type": "address"
        }
      ],
      "name": "CandidateCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "walletAddress",
          "type": "address"
        }
      ],
      "name": "CandidateWithdrawn",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "round",
          "type": "uint256"
        }
      ],
      "name": "CountVotes_AllCandidatesAreTiedAfterCount",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "candidateAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "firstVoteCounts",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "round",
          "type": "uint256"
        }
      ],
      "name": "CountVotes_CandidateEliminatedLowestVoteCount",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "voterAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "fromCandidate",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "toCandidate",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "round",
          "type": "uint256"
        }
      ],
      "name": "CountVotes_CandidateReceivedVoterFromTo",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "candidateAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "firstVoteCounts",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "round",
          "type": "uint256"
        }
      ],
      "name": "CountVotes_CandidateWinsOnlyCandidateLeft",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "candidateAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "firstVoteCounts",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "round",
          "type": "uint256"
        }
      ],
      "name": "CountVotes_CandidateWinsThresholdReached",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "candidateAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "firstVoteCounts",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "round",
          "type": "uint256"
        }
      ],
      "name": "CountVotes_DeletedReceivedZeroFirstChoiceVotes",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "voterAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "round",
          "type": "uint256"
        }
      ],
      "name": "CountVotes_ExhaustedVoterChoices",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "voterAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "thirdChoice",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "round",
          "type": "uint256"
        }
      ],
      "name": "CountVotes_SecondChoiceIsEliminated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "voterAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address[]",
          "name": "voterChoices",
          "type": "address[]"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "firstChoice",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "secondChoice",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "thirdChoice",
          "type": "address"
        }
      ],
      "name": "Voted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "walletAddress",
          "type": "address"
        }
      ],
      "name": "VoterRegistered",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "beginPhaseThree",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "beginPhaseTwo",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_candidateAddress",
          "type": "address"
        }
      ],
      "name": "checkIfCandidateExist",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_voterAddress",
          "type": "address"
        }
      ],
      "name": "checkIfVoterExist",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "checkUpkeep",
      "outputs": [
        {
          "internalType": "bool",
          "name": "upkeepNeeded",
          "type": "bool"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "countVotes",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "electionAdmin",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_candidateName",
          "type": "string"
        }
      ],
      "name": "enterCandidate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_candidateAddress",
          "type": "address"
        }
      ],
      "name": "getCandidateByAddress",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "id",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "address",
              "name": "walletAddress",
              "type": "address"
            },
            {
              "internalType": "address[]",
              "name": "firstChoiceVoters",
              "type": "address[]"
            },
            {
              "internalType": "uint256",
              "name": "firstVotesCount",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "isEliminated",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "isWinner",
              "type": "bool"
            },
            {
              "internalType": "uint256",
              "name": "totalVotesCount",
              "type": "uint256"
            }
          ],
          "internalType": "struct RankedChoiceContract.Candidate",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getLastVotingTimeStamp",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getNumberOfCandidates",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_voterAddress",
          "type": "address"
        }
      ],
      "name": "getVoterByAddress",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "voterId",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "walletAddress",
              "type": "address"
            },
            {
              "internalType": "address[]",
              "name": "voterChoices",
              "type": "address[]"
            },
            {
              "internalType": "bool",
              "name": "hasVoted",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "isRegistered",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "isCandidate",
              "type": "bool"
            }
          ],
          "internalType": "struct RankedChoiceContract.Voter",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getWinner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "numberOfVoters",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_value",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "numberOfVotersVoted",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_value",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "performUpkeep",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "registerToVote",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "firstChoice",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "secondChoice",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "thirdChoice",
          "type": "address"
        }
      ],
      "name": "vote",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "winner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdrawCandidate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x405c52648e6593cfc79f12d6be0bf1a4d55c5b9abce8c8141c3cfc9ca54e9ade",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0x5FbDB2315678afecb367f032d93F642f64180aa3",
    "transactionIndex": 0,
    "gasUsed": "5620582",
    "logsBloom": "0x
    "blockHash": "0xcd56bad700137174d373f95ab4b81f7bf9cb7228f6fb5897857ea0e2f8c51eed",
    "transactionHash": "0x405c52648e6593cfc79f12d6be0bf1a4d55c5b9abce8c8141c3cfc9ca54e9ade",
    "logs": [],
    "blockNumber": 1,
    "cumulativeGasUsed": "5620582",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "34bed45eed7e3f99a8bd1d489a8b3e73",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"currentPhase\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"functionPhase\",\"type\":\"uint16\"}],\"name\":\"ActionIsNotAllowedAtThisStage\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"OnlyElectionAdministratorIsAllowedAccess\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PerformUpKeep_NotEnoughTimeHasPassed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PhaseThree_ThereIsNoWinnerYet\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"voterAddress\",\"type\":\"address\"}],\"name\":\"PhaseTwo_AlreadyVoted\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"voterAddress\",\"type\":\"address\"}],\"name\":\"PhaseTwo_CandidateCannotReceiveMultipleVotesFromTheSameVoter\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"voterAddress\",\"type\":\"address\"}],\"name\":\"PhaseTwo_VoterIsNotRegistered\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"candidateAddress\",\"type\":\"address\"}],\"name\":\"Voting_CandidateAddressDoesNotExist\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"candidateAddress\",\"type\":\"address\"}],\"name\":\"Voting_CandidateAlreadyExists\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"voterAddress\",\"type\":\"address\"}],\"name\":\"Voting_VoterDoesNotExist\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"voterAddress\",\"type\":\"address\"}],\"name\":\"Voting_VoterIsAlreadyRegistered\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"walletAddress\",\"type\":\"address\"}],\"name\":\"CandidateCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"walletAddress\",\"type\":\"address\"}],\"name\":\"CandidateWithdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"round\",\"type\":\"uint256\"}],\"name\":\"CountVotes_AllCandidatesAreTiedAfterCount\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"candidateAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"firstVoteCounts\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"round\",\"type\":\"uint256\"}],\"name\":\"CountVotes_CandidateEliminatedLowestVoteCount\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"voterAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"fromCandidate\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"toCandidate\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"round\",\"type\":\"uint256\"}],\"name\":\"CountVotes_CandidateReceivedVoterFromTo\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"candidateAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"firstVoteCounts\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"round\",\"type\":\"uint256\"}],\"name\":\"CountVotes_CandidateWinsOnlyCandidateLeft\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"candidateAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"firstVoteCounts\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"round\",\"type\":\"uint256\"}],\"name\":\"CountVotes_CandidateWinsThresholdReached\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"candidateAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"firstVoteCounts\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"round\",\"type\":\"uint256\"}],\"name\":\"CountVotes_DeletedReceivedZeroFirstChoiceVotes\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"voterAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"round\",\"type\":\"uint256\"}],\"name\":\"CountVotes_ExhaustedVoterChoices\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"voterAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"thirdChoice\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"round\",\"type\":\"uint256\"}],\"name\":\"CountVotes_SecondChoiceIsEliminated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"voterAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"voterChoices\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"firstChoice\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"secondChoice\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"thirdChoice\",\"type\":\"address\"}],\"name\":\"Voted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"walletAddress\",\"type\":\"address\"}],\"name\":\"VoterRegistered\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"beginPhaseThree\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"beginPhaseTwo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_candidateAddress\",\"type\":\"address\"}],\"name\":\"checkIfCandidateExist\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_voterAddress\",\"type\":\"address\"}],\"name\":\"checkIfVoterExist\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"checkUpkeep\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"upkeepNeeded\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"countVotes\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"electionAdmin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_candidateName\",\"type\":\"string\"}],\"name\":\"enterCandidate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_candidateAddress\",\"type\":\"address\"}],\"name\":\"getCandidateByAddress\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"walletAddress\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"firstChoiceVoters\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"firstVotesCount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isEliminated\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isWinner\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"totalVotesCount\",\"type\":\"uint256\"}],\"internalType\":\"struct RankedChoiceContract.Candidate\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLastVotingTimeStamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNumberOfCandidates\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_voterAddress\",\"type\":\"address\"}],\"name\":\"getVoterByAddress\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"voterId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"walletAddress\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"voterChoices\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"hasVoted\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isRegistered\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isCandidate\",\"type\":\"bool\"}],\"internalType\":\"struct RankedChoiceContract.Voter\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getWinner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"numberOfVoters\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"numberOfVotersVoted\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"performUpkeep\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"registerToVote\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"firstChoice\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"secondChoice\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"thirdChoice\",\"type\":\"address\"}],\"name\":\"vote\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"winner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawCandidate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Kent Miguel\",\"details\":\"uses chainlink automation to end and start register, voting, and count phases\",\"kind\":\"dev\",\"methods\":{\"beginPhaseTwo()\":{\"details\":\"look for checkschange to private after testing...??\"},\"countVotes()\":{\"details\":\"can only be called after phase3 begins and only by the deployer\"},\"enterCandidate(string)\":{\"details\":\"Candidate will be registered to vote automatically and will be disabled when register phase is over\",\"params\":{\"_candidateName\":\"The name of the candidate\"}},\"registerToVote()\":{\"details\":\"1. users who enter as a candidate will be registered automatically, will be disabled at the end of phase 1 2. Optimize this by accessing struct once and store it in a local variable and use that for the checks.. see coverage first and gas viewer\"},\"vote(address,address,address)\":{\"details\":\"come back to implement checks: 1. phase switches 2. Undervote is not allowed meaning all voters must choose three candidates in order to cast vote\"},\"withdrawCandidate()\":{\"details\":\"checks:      1 . disabled when register phase is over      2. check that person who registered are only the one who can withdraw      3. check that cannot withdraw if entry does not exist\"}},\"title\":\"A Ranked Choice Voting Smart Contract\",\"version\":1},\"userdoc\":{\"errors\":{\"ActionIsNotAllowedAtThisStage(uint16,uint16)\":[{\"notice\":\"Errors ///\"}]},\"kind\":\"user\",\"methods\":{\"beginPhaseThree()\":{\"notice\":\"Phase 3: Count Votes\"},\"beginPhaseTwo()\":{\"notice\":\"this function turns on the phase 2 (voting) switch which disables phase 1 functionalities\"},\"countVotes()\":{\"notice\":\"this function calculates the votes to get the winner\"},\"electionAdmin()\":{\"notice\":\"Election global variables ///\"},\"enterCandidate(string)\":{\"notice\":\"this functions registers candidates\"},\"getCandidateByAddress(address)\":{\"notice\":\"Getter functions ///\"},\"registerToVote()\":{\"notice\":\"this function registers voters to vote for phase 2: Voting\"},\"vote(address,address,address)\":{\"notice\":\"this function allows voters to vote their choices in the election\"},\"winner()\":{\"notice\":\"phase 3 variables\"},\"withdrawCandidate()\":{\"notice\":\"withdraws from election\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/RankedChoiceContract.sol\":\"RankedChoiceContract\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/AutomationBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ncontract AutomationBase {\\n  error OnlySimulatedBackend();\\n\\n  /**\\n   * @notice method that allows it to be simulated via eth_call by checking that\\n   * the sender is the zero address.\\n   */\\n  function preventExecution() internal view {\\n    if (tx.origin != address(0)) {\\n      revert OnlySimulatedBackend();\\n    }\\n  }\\n\\n  /**\\n   * @notice modifier that allows it to be simulated via eth_call by checking\\n   * that the sender is the zero address.\\n   */\\n  modifier cannotExecute() {\\n    preventExecution();\\n    _;\\n  }\\n}\\n\",\"keccak256\":\"0x5d354afa1a97dffe66094397cdcbb0c14713cf3d609d88fd8f9891010e9a351a\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/AutomationCompatible.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./AutomationBase.sol\\\";\\nimport \\\"./interfaces/AutomationCompatibleInterface.sol\\\";\\n\\nabstract contract AutomationCompatible is AutomationBase, AutomationCompatibleInterface {}\\n\",\"keccak256\":\"0x40e5ae0eff4edd0740c1b5590d09c344f84dee031e82d5294563e99603774f80\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AutomationCompatibleInterface {\\n  /**\\n   * @notice method that is simulated by the keepers to see if any work actually\\n   * needs to be performed. This method does does not actually need to be\\n   * executable, and since it is only ever simulated it can consume lots of gas.\\n   * @dev To ensure that it is never called, you may want to add the\\n   * cannotExecute modifier from KeeperBase to your implementation of this\\n   * method.\\n   * @param checkData specified in the upkeep registration so it is always the\\n   * same for a registered upkeep. This can easily be broken down into specific\\n   * arguments using `abi.decode`, so multiple upkeeps can be registered on the\\n   * same contract and easily differentiated by the contract.\\n   * @return upkeepNeeded boolean to indicate whether the keeper should call\\n   * performUpkeep or not.\\n   * @return performData bytes that the keeper should call performUpkeep with, if\\n   * upkeep is needed. If you would like to encode data to decode later, try\\n   * `abi.encode`.\\n   */\\n  function checkUpkeep(bytes calldata checkData) external returns (bool upkeepNeeded, bytes memory performData);\\n\\n  /**\\n   * @notice method that is actually executed by the keepers, via the registry.\\n   * The data returned by the checkUpkeep simulation will be passed into\\n   * this method to actually be executed.\\n   * @dev The input to this method should not be trusted, and the caller of the\\n   * method should not even be restricted to any single registry. Anyone should\\n   * be able call it, and the input should be validated, there is no guarantee\\n   * that the data passed in is the performData returned from checkUpkeep. This\\n   * could happen due to malicious keepers, racing keepers, or simply a state\\n   * change while the performUpkeep transaction is waiting for confirmation.\\n   * Always validate the data passed in.\\n   * @param performData is the data which was passed back from the checkData\\n   * simulation. If it is encoded, it can easily be decoded into other types by\\n   * calling `abi.decode`. This data should not be trusted, and should be\\n   * validated against the contract's current state.\\n   */\\n  function performUpkeep(bytes calldata performData) external;\\n}\\n\",\"keccak256\":\"0x67076747c6f66d8d43472a56e72879c350056bff82e069addaf9064922863340\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Counters.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary Counters {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\",\"keccak256\":\"0xf0018c2440fbe238dd3a8732fa8e17a0f9dce84d31451dc8a32f6d62b349c9f1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/structs/EnumerableSet.sol)\\n// This file was procedurally generated from scripts/generate/templates/EnumerableSet.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n *\\n * [WARNING]\\n * ====\\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\\n * unusable.\\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\\n * array of EnumerableSet.\\n * ====\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastValue;\\n                // Update the index for the moved value\\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        bytes32[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0xc3ff3f5c4584e1d9a483ad7ced51ab64523201f4e3d3c65293e4ca8aeb77a961\",\"license\":\"MIT\"},\"contracts/RankedChoiceContract.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/utils/Counters.sol\\\";\\nimport \\\"hardhat/console.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\nimport \\\"@chainlink/contracts/src/v0.8/AutomationCompatible.sol\\\";\\n\\n/// Errors ///\\nerror ActionIsNotAllowedAtThisStage(uint16 currentPhase, uint16 functionPhase);\\nerror OnlyElectionAdministratorIsAllowedAccess(address user);\\nerror Voting_CandidateAlreadyExists(address candidateAddress);\\nerror Voting_CandidateAddressDoesNotExist(address candidateAddress);\\nerror Voting_VoterIsAlreadyRegistered(address voterAddress);\\nerror Voting_VoterDoesNotExist(address voterAddress);\\nerror PhaseTwo_RegisteringPhaseIsOver(address voterAddress);\\nerror PhaseTwo_EnteringCandidatePhaseIsOver(address voterAddress);\\nerror PhaseTwo_CannotWithdrawPhaseOneIsOver(address voterAddress);\\nerror PhaseTwo_AlreadyVoted(address voterAddress);\\nerror PhaseTwo_VoterIsNotRegistered(address voterAddress);\\nerror PhaseTwo_CandidateCannotReceiveMultipleVotesFromTheSameVoter(\\n    address voterAddress\\n);\\nerror PhaseThree_ThereIsNoWinnerYet();\\nerror PerformUpKeep_NotEnoughTimeHasPassed();\\n\\n/**\\n * @title A Ranked Choice Voting Smart Contract\\n * @author Kent Miguel\\n * @dev uses chainlink automation to end and start register, voting, and count phases\\n */\\ncontract RankedChoiceContract is AutomationCompatibleInterface {\\n    using Counters for Counters.Counter;\\n\\n    /////////////////////\\n    //     Events      //\\n    /////////////////////\\n    event CandidateCreated(\\n        uint256 indexed id,\\n        string indexed name,\\n        address indexed walletAddress\\n    );\\n\\n    event CandidateWithdrawn(\\n        uint256 indexed id,\\n        string indexed name,\\n        address indexed walletAddress\\n    );\\n\\n    event VoterRegistered(uint256 indexed id, address indexed walletAddress);\\n\\n    event Voted(\\n        uint256 indexed id,\\n        address indexed voterAddress,\\n        address[] voterChoices,\\n        address firstChoice,\\n        address secondChoice,\\n        address thirdChoice\\n    );\\n\\n    event CountVotes_DeletedReceivedZeroFirstChoiceVotes(\\n        address indexed candidateAddress,\\n        uint256 firstVoteCounts,\\n        uint256 round\\n    );\\n\\n    event CountVotes_CandidateWinsThresholdReached(\\n        address indexed candidateAddress,\\n        uint256 firstVoteCounts,\\n        uint256 round\\n    );\\n\\n    event CountVotes_CandidateWinsOnlyCandidateLeft(\\n        address indexed candidateAddress,\\n        uint256 firstVoteCounts,\\n        uint256 round\\n    );\\n\\n    event CountVotes_CandidateEliminatedLowestVoteCount(\\n        address indexed candidateAddress,\\n        uint256 firstVoteCounts,\\n        uint256 round\\n    );\\n\\n    event CountVotes_CandidateReceivedVoterFromTo(\\n        address indexed voterAddress,\\n        address fromCandidate,\\n        address toCandidate,\\n        uint256 round\\n    );\\n\\n    //Emit event 2nd choice doesnt exist so give vote to 3rd choice\\n    event CountVotes_SecondChoiceIsEliminated(\\n        address indexed voterAddress,\\n        address thirdChoice,\\n        uint256 round\\n    );\\n\\n    event CountVotes_ExhaustedVoterChoices(\\n        address indexed voterAddress,\\n        uint256 round\\n    );\\n\\n    event CountVotes_AllCandidatesAreTiedAfterCount(uint256 round);\\n\\n    /// Candidate variables ///\\n    // we might only need 1st choice vote counts... the rest of the vote counts might only be needed if we alocate the points there for visual and metric analysis for the front end...\\n    struct Candidate {\\n        uint256 id;\\n        string name;\\n        address walletAddress;\\n        address[] firstChoiceVoters;\\n        uint256 firstVotesCount;\\n        bool isEliminated;\\n        bool isWinner;\\n        uint256 totalVotesCount;\\n    }\\n\\n    ///Voter choice will be stored in an array , the push and pop nature can be used as a stack, store 3rd choice first and 1st choice last... that way we can keep popping choices for each round.\\n    struct Voter {\\n        uint256 voterId;\\n        // string name;\\n        address walletAddress;\\n        address[] voterChoices;\\n        bool hasVoted;\\n        bool isRegistered;\\n        bool isCandidate;\\n    }\\n\\n    address[] private candidateAddresses; //array of candidates - might be able to make enumerable\\n    //mapping(uint256 => mapping(address => Candidate)) private addressToCandidate;\\n    mapping(address => Candidate) private addressToCandidate; //TODO might be a good idea to use enumerable type from OpenZeppeling\\n    mapping(address => Voter) private registeredVoters; //TODO might be a good idea to use enumerable type from OpenZeppeling\\n\\n    /// Election global variables ///\\n    address public electionAdmin;\\n    bool private isWinnerPicked; //TODO initialize to false in the constructor\\n    bool private areAllActiveCandidatesTied; //initialize to false in constructor\\n    Counters.Counter private candidateIdCounter;\\n    Counters.Counter private numberOfCandidates;\\n    Counters.Counter private voterIdCounter;\\n    Counters.Counter public numberOfVoters;\\n    Counters.Counter public numberOfVotersVoted;\\n    uint16 private currentPhase;\\n    uint256 private startTime;\\n\\n    /// phase 3 variables\\n    address public winner;\\n    Counters.Counter private round;\\n    address[] private firstChoiceVotersAddresses; //might be able to make enumerable\\n    Counters.Counter private activeCandidatesCounter;\\n\\n    /////////////////////\\n    ///  Modifiers  ///\\n    /////////////////////\\n    modifier onlyExistingVoter() {\\n        if (checkIfVoterExist(msg.sender) == false) {\\n            revert Voting_VoterDoesNotExist(msg.sender);\\n        }\\n        _;\\n    }\\n\\n    modifier onlyExistingCandidateChoices(\\n        address firstChoice,\\n        address secondChoice,\\n        address thirdChoice\\n    ) {\\n        //checks if candidates exist\\n        if (checkIfCandidateExist(firstChoice) == false) {\\n            revert Voting_CandidateAddressDoesNotExist(firstChoice);\\n        }\\n        if (checkIfCandidateExist(secondChoice) == false) {\\n            revert Voting_CandidateAddressDoesNotExist(secondChoice);\\n        }\\n        if (checkIfCandidateExist(thirdChoice) == false) {\\n            revert Voting_CandidateAddressDoesNotExist(thirdChoice);\\n        }\\n        _;\\n    }\\n\\n    modifier onlyUniqueChoices(\\n        address firstChoice,\\n        address secondChoice,\\n        address thirdChoice\\n    ) {\\n        //checks for candidates must exist - there must be an efficient way, maybe use a mapping\\n        if (\\n            firstChoice == secondChoice ||\\n            firstChoice == thirdChoice ||\\n            secondChoice == thirdChoice\\n        ) {\\n            revert PhaseTwo_CandidateCannotReceiveMultipleVotesFromTheSameVoter(\\n                msg.sender\\n            );\\n        }\\n        _;\\n    }\\n\\n    modifier onlyElectionAdmin() {\\n        if (msg.sender != electionAdmin) {\\n            revert OnlyElectionAdministratorIsAllowedAccess(msg.sender);\\n        }\\n        _;\\n    }\\n\\n    modifier ifCurrentPhaseIsActive(uint16 phase) {\\n        if (phase != currentPhase) {\\n            revert ActionIsNotAllowedAtThisStage(currentPhase, phase);\\n        }\\n        _;\\n    }\\n\\n    /////////////////////\\n    // Constructor //\\n    /////////////////////\\n\\n    constructor() {\\n        electionAdmin = msg.sender;\\n        isWinnerPicked = false;\\n        currentPhase = 1;\\n        startTime = block.timestamp;\\n    }\\n\\n    /////////////////////\\n    // Main Functions //\\n    ////////////////////\\n\\n    /// --- Phase 1 Functions --- ///\\n    /**\\n     * @notice this functions registers candidates\\n     * @param _candidateName The name of the candidate\\n     * @dev Candidate will be registered to vote automatically and will be disabled when register phase is over\\n     */\\n    function enterCandidate(\\n        string memory _candidateName\\n    ) external ifCurrentPhaseIsActive(1) {\\n        if (checkIfCandidateExist(msg.sender)) {\\n            revert Voting_CandidateAlreadyExists(msg.sender);\\n        }\\n\\n        candidateIdCounter.increment();\\n        numberOfCandidates.increment();\\n        activeCandidatesCounter.increment();\\n        uint256 _candidateId = candidateIdCounter.current();\\n        address[] memory _firstChoiceVoters;\\n\\n        Candidate memory candidate = Candidate(\\n            _candidateId,\\n            _candidateName,\\n            // _candidateAddress,\\n            msg.sender,\\n            _firstChoiceVoters,\\n            0,\\n            false,\\n            false,\\n            0\\n        );\\n\\n        //store candidate struct in mapping\\n        addressToCandidate[msg.sender] = candidate;\\n\\n        //push to candidate address\\n        candidateAddresses.push(msg.sender);\\n\\n        console.log(\\n            \\\"Entered candidate: \\\",\\n            _candidateName,\\n            \\\" from address : \\\",\\n            msg.sender\\n        );\\n\\n        emit CandidateCreated(\\n            candidate.id,\\n            candidate.name,\\n            candidate.walletAddress\\n        );\\n\\n        //if entering again after withdrawing then doesnt need to register again\\n        if (registeredVoters[msg.sender].voterId <= 0) {\\n            registerToVote();\\n            registeredVoters[msg.sender].isCandidate = true;\\n        }\\n    }\\n\\n    /**\\n     * @notice this function registers voters to vote for phase 2: Voting\\n     * @dev\\n     * 1. users who enter as a candidate will be registered automatically, will be disabled at the end of phase 1\\n     * 2. Optimize this by accessing struct once and store it in a local variable and use that for the checks.. see coverage first and gas viewer\\n     *\\n     */\\n    function registerToVote() public ifCurrentPhaseIsActive(1) {\\n        //check for non-candidate voters\\n        if (\\n            checkIfVoterExist(msg.sender) &&\\n            registeredVoters[msg.sender].isCandidate == false\\n        ) {\\n            revert Voting_VoterIsAlreadyRegistered(msg.sender);\\n        }\\n        //check for candidates\\n        if (\\n            checkIfVoterExist(msg.sender) &&\\n            registeredVoters[msg.sender].isCandidate == true\\n        ) {\\n            revert Voting_VoterIsAlreadyRegistered(msg.sender);\\n        }\\n\\n        voterIdCounter.increment();\\n        numberOfVoters.increment();\\n        uint256 _voterId = voterIdCounter.current();\\n        address[] memory _Voterchoices;\\n\\n        Voter memory voter = Voter(\\n            _voterId,\\n            msg.sender,\\n            _Voterchoices,\\n            false,\\n            true,\\n            false\\n        );\\n\\n        registeredVoters[msg.sender] = voter;\\n        emit VoterRegistered(_voterId, msg.sender);\\n    }\\n\\n    /**\\n     * @notice withdraws from election\\n     * @dev checks:\\n     *      1 . disabled when register phase is over\\n     *      2. check that person who registered are only the one who can withdraw\\n     *      3. check that cannot withdraw if entry does not exist\\n     */\\n    function withdrawCandidate() external ifCurrentPhaseIsActive(1) {\\n        if (addressToCandidate[msg.sender].id <= 0) {\\n            revert Voting_CandidateAddressDoesNotExist(msg.sender);\\n        }\\n\\n        Candidate memory _candidate = addressToCandidate[msg.sender];\\n\\n        delete (addressToCandidate[msg.sender]);\\n        numberOfCandidates.decrement();\\n        activeCandidatesCounter.decrement();\\n        emit CandidateWithdrawn(\\n            _candidate.id,\\n            _candidate.name,\\n            _candidate.walletAddress\\n        );\\n    }\\n\\n    /// Phase 2 Functions ///\\n\\n    /**\\n     * @notice this function turns on the phase 2 (voting) switch which disables phase 1 functionalities\\n     * @dev look for checks\\n     * @dev change to private after testing...??\\n     */\\n    function beginPhaseTwo()\\n        public\\n        onlyElectionAdmin\\n        ifCurrentPhaseIsActive(1)\\n    {\\n        console.log(\\\"Phase 1 Ends\\\");\\n        currentPhase = 2;\\n        console.log(\\\"Begin Phase 2\\\");\\n    }\\n\\n    /**\\n     * @notice this function allows voters to vote their choices in the election\\n     * @dev come back to implement checks:\\n     * 1. phase switches\\n     * 2. Undervote is not allowed meaning all voters must choose three candidates in order to cast vote\\n     */\\n    function vote(\\n        address firstChoice,\\n        address secondChoice,\\n        address thirdChoice\\n    )\\n        public\\n        onlyExistingVoter\\n        onlyExistingCandidateChoices(firstChoice, secondChoice, thirdChoice)\\n        onlyUniqueChoices(firstChoice, secondChoice, thirdChoice)\\n        ifCurrentPhaseIsActive(2)\\n    {\\n        Voter storage _voter = registeredVoters[msg.sender];\\n\\n        if (_voter.isRegistered == false) {\\n            revert PhaseTwo_VoterIsNotRegistered(msg.sender);\\n        }\\n\\n        if (_voter.hasVoted == true) {\\n            revert PhaseTwo_AlreadyVoted(msg.sender);\\n        }\\n\\n        //Assign vote to firstChoice\\n        Candidate storage _firstChoice = addressToCandidate[firstChoice];\\n        _firstChoice.firstChoiceVoters.push(msg.sender);\\n        _firstChoice.firstVotesCount = _firstChoice.firstChoiceVoters.length;\\n        addressToCandidate[firstChoice] = _firstChoice;\\n\\n        //add voter's choices\\n        //add 1st choice last in order to pop in this order 1st -> 2nd -> 3rd for each round\\n        _voter.voterChoices.push(thirdChoice);\\n        _voter.voterChoices.push(secondChoice);\\n        _voter.voterChoices.push(firstChoice);\\n\\n        //change flags\\n        _voter.hasVoted = true;\\n        registeredVoters[msg.sender] = _voter;\\n        numberOfVotersVoted.increment();\\n\\n        console.log(\\\"Voter: \\\", _voter.walletAddress, \\\" just voted\\\");\\n\\n        emit Voted(\\n            _voter.voterId,\\n            _voter.walletAddress,\\n            _voter.voterChoices,\\n            firstChoice,\\n            secondChoice,\\n            thirdChoice\\n        );\\n    }\\n\\n    /// Phase 3: Count Votes\\n    // beginPhase3()\\n    function beginPhaseThree()\\n        public\\n        onlyElectionAdmin\\n        ifCurrentPhaseIsActive(2)\\n    {\\n        console.log(\\\"Phase 2 Ends\\\");\\n        currentPhase = 3;\\n        console.log(\\\"Phase 3 Begins\\\");\\n    }\\n\\n    /**\\n     * @notice this function calculates the votes to get the winner\\n     * @dev can only be called after phase3 begins and only by the deployer\\n     */\\n    function countVotes() public onlyElectionAdmin ifCurrentPhaseIsActive(3) {\\n        ///TODO checks\\n        // onlyDeployer can initiate vote count\\n        //if phase2 is over - check flags\\n\\n        uint256 totalPossibleVotes = numberOfVotersVoted.current();\\n        uint256 threshold = (totalPossibleVotes / 2) + 1;\\n\\n        //loop until winner is found or tied\\n        while (isWinnerPicked == false && areAllActiveCandidatesTied == false) {\\n            // calculate total votes for each candidates\\n            countFirstChoiceVotes(threshold);\\n\\n            console.log(\\n                \\\"isWinnerPicked before entering distributeVotes\\\",\\n                isWinnerPicked\\n            );\\n            console.log(\\n                \\\"First choice votes array length\\\",\\n                firstChoiceVotersAddresses.length\\n            );\\n            console.log(\\n                \\\"Number of active candidates left: \\\",\\n                activeCandidatesCounter.current()\\n            );\\n\\n            if (\\n                isWinnerPicked == false && areAllActiveCandidatesTied == false\\n            ) {\\n                console.log(\\\"Distributing votes\\\");\\n                distributeVotes();\\n                console.log(\\n                    \\\"Number of candidates after distributing votes\\\",\\n                    activeCandidatesCounter.current()\\n                );\\n            } else if (\\n                isWinnerPicked == false && areAllActiveCandidatesTied == true\\n            ) {\\n                console.log(\\\"All candidates are tied after counting votes\\\");\\n                emit CountVotes_AllCandidatesAreTiedAfterCount(round.current());\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice this is a helper function for countVotes() to count firstChoice votes for each candidate\\n     */\\n    function countFirstChoiceVotes(\\n        uint256 _threshold\\n    ) private onlyElectionAdmin ifCurrentPhaseIsActive(3) {\\n        round.increment();\\n        console.log(\\\"----- COUNT FIRST CHOICE VOTES -----\\\");\\n        console.log(\\\"ROUND: \\\", round.current());\\n\\n        uint256 highestVote = 0;\\n        uint256 lowestVote = _threshold;\\n\\n        console.log(\\\"HighestVote\\\", highestVote);\\n        console.log(\\\"LowestVote\\\", lowestVote);\\n        console.log(\\\"Number of candidates\\\", activeCandidatesCounter.current());\\n\\n        for (uint256 i = 0; i < numberOfCandidates.current(); i++) {\\n            address _candidateAddress = candidateAddresses[i];\\n\\n            if (checkIfCandidateExist(_candidateAddress) == true) {\\n                Candidate memory _candidate = addressToCandidate[\\n                    _candidateAddress\\n                ];\\n\\n                console.log(\\n                    \\\"----- Checking candidate: -----\\\",\\n                    _candidateAddress,\\n                    \\\" at index \\\",\\n                    i\\n                );\\n\\n                console.log(\\\"Number of votes: \\\", _candidate.firstVotesCount);\\n\\n                //Delete 0 firstChoice getters\\n                if (_candidate.firstVotesCount == 0) {\\n                    console.log(\\n                        \\\"Deleting 0 vote candidate: \\\",\\n                        _candidateAddress\\n                    );\\n                    // delete candidate from mapping\\n                    delete (addressToCandidate[_candidateAddress]);\\n\\n                    //emit Event - received 0 votes\\n                    emit CountVotes_DeletedReceivedZeroFirstChoiceVotes(\\n                        _candidateAddress,\\n                        _candidate.firstVotesCount,\\n                        round.current()\\n                    );\\n                    activeCandidatesCounter.decrement();\\n                } else if (_candidate.firstVotesCount >= _threshold) {\\n                    highestVote = _candidate.firstVotesCount;\\n                    winner = _candidate.walletAddress;\\n                    isWinnerPicked = true;\\n                    console.log(\\\"Reached threshhold found winner\\\", winner);\\n                    emit CountVotes_CandidateWinsThresholdReached(\\n                        winner,\\n                        highestVote,\\n                        round.current()\\n                    );\\n                }\\n                //Compare vote count if candidate is still active\\n                if (checkIfCandidateExist(_candidateAddress) == true) {\\n                    if (_candidate.firstVotesCount <= lowestVote) {\\n                        //how do we keep track of the lowest votes\\n                        lowestVote = _candidate.firstVotesCount;\\n                        console.log(\\\"lowestVote after comparison\\\", lowestVote);\\n                    }\\n                    if (_candidate.firstVotesCount > highestVote) {\\n                        //keeps track of highest vote\\n                        highestVote = _candidate.firstVotesCount;\\n                        console.log(\\\"highestVote after comparison\\\", lowestVote);\\n                    }\\n                }\\n\\n                console.log(\\n                    \\\"--- Finished counting votes for candidate ----\\\",\\n                    i\\n                );\\n            }\\n        }\\n        //Evaluate if all candidates are tied after counting votes\\n        if (highestVote == lowestVote) {\\n            //this means there is a tie\\n            areAllActiveCandidatesTied = true;\\n        }\\n\\n        //get the lowest vote getters at the end of the round and eliminate & save the firstChoiceVoters to array\\n        if (isWinnerPicked == false && areAllActiveCandidatesTied == false) {\\n            console.log(\\\"--- Start eliminating lowest vote candidates ----\\\");\\n            console.log(\\\"Highest vote\\\", highestVote);\\n            console.log(\\\"Lowest vote\\\", lowestVote);\\n\\n            for (uint256 i = 0; i < numberOfCandidates.current(); i++) {\\n                address _candidateAddress = candidateAddresses[i];\\n\\n                if (checkIfCandidateExist(_candidateAddress) == true) {\\n                    Candidate memory _candidate = addressToCandidate[\\n                        _candidateAddress\\n                    ];\\n\\n                    //if candidate received lowest vote, then eliminate and store firstVote voters to array to be distributed\\n                    if (_candidate.firstVotesCount == lowestVote) {\\n                        _candidate.isEliminated = true;\\n                        emit CountVotes_CandidateEliminatedLowestVoteCount(\\n                            _candidate.walletAddress,\\n                            _candidate.firstVotesCount,\\n                            round.current()\\n                        );\\n                        console.log(\\n                            \\\"Candidate received the lowest votes and eliminated\\\",\\n                            _candidate.walletAddress\\n                        );\\n                        console.log(\\n                            \\\"...with vote count: \\\",\\n                            _candidate.firstVotesCount\\n                        );\\n                        if (_candidate.firstVotesCount > 0) {\\n                            console.log(\\n                                \\\"These voters will go to their next choice: \\\"\\n                            );\\n                            for (\\n                                uint256 j = 0;\\n                                j < _candidate.firstVotesCount;\\n                                j++\\n                            ) {\\n                                firstChoiceVotersAddresses.push(\\n                                    _candidate.firstChoiceVoters[j]\\n                                );\\n                                console.log(\\n                                    \\\"...\\\",\\n                                    _candidate.firstChoiceVoters[j]\\n                                );\\n                            }\\n                        }\\n\\n                        //delete candidate\\n                        delete (addressToCandidate[_candidateAddress]);\\n                        activeCandidatesCounter.decrement();\\n                    }\\n                    //save candidate with highestVote as winner\\n                    if (_candidate.firstVotesCount == highestVote) {\\n                        winner = _candidate.walletAddress;\\n                    }\\n                }\\n            }\\n\\n            //at the end of the loop evaluate if there's only 1 candidate left\\n            if (activeCandidatesCounter.current() == 1) {\\n                Candidate memory _candidate = addressToCandidate[winner];\\n                // if there is only 1 active candidate left then that is the winner\\n                highestVote = _candidate.firstVotesCount;\\n                winner = _candidate.walletAddress;\\n                isWinnerPicked = true;\\n                console.log(\\\"Only one candidate left, found winner\\\", winner);\\n                emit CountVotes_CandidateWinsOnlyCandidateLeft(\\n                    winner,\\n                    highestVote,\\n                    round.current()\\n                );\\n            }\\n            console.log(\\\"---Finished eliminating lowest vote candidates ---\\\");\\n        }\\n    }\\n\\n    /**\\n     * @notice this function distributes the first choice votes of the eliminated (lowest) vote candidates to their next ranked candidates\\n     */\\n    function distributeVotes()\\n        private\\n        onlyElectionAdmin\\n        ifCurrentPhaseIsActive(3)\\n    {\\n        //traverse firstChoiceVoters addresses to get address\\n        console.log(\\n            \\\"--- Distribute votes from lowest vote candidates ---\\\",\\n            firstChoiceVotersAddresses.length\\n        );\\n\\n        for (uint256 i = 0; i < firstChoiceVotersAddresses.length; i++) {\\n            //get Voter\\n            Voter storage _voter = registeredVoters[\\n                firstChoiceVotersAddresses[i]\\n            ];\\n\\n            console.log(\\n                \\\"--- Distribute voter: ---\\\",\\n                firstChoiceVotersAddresses[i]\\n            );\\n\\n            //pop the 1st choice vote\\n            if (_voter.voterChoices.length > 0) {\\n                address _fromCandidate = _voter.voterChoices[\\n                    _voter.voterChoices.length - 1\\n                ];\\n                _voter.voterChoices.pop();\\n                //access the next choice - get length of voterChoices-1 as index\\n                if (_voter.voterChoices.length > 0) {\\n                    //distribute vote for the next choice\\n                    uint256 index = _voter.voterChoices.length - 1;\\n                    //check if the second choice is already eliminated, then pop and use the 3rd choice\\n                    if (\\n                        checkIfCandidateExist(_voter.voterChoices[index]) ==\\n                        false\\n                    ) {\\n                        _voter.voterChoices.pop();\\n                        if (_voter.voterChoices.length > 0) {\\n                            index = _voter.voterChoices.length - 1;\\n                            console.log(\\n                                \\\"Next candidate is eliminated so distribute the next choice candidate (3rd voter) :\\\",\\n                                _voter.voterChoices[index],\\n                                \\\", from voter : \\\",\\n                                _voter.walletAddress\\n                            );\\n                            emit CountVotes_SecondChoiceIsEliminated(\\n                                _voter.walletAddress,\\n                                _voter.voterChoices[index],\\n                                round.current()\\n                            );\\n                        } else {\\n                            console.log(\\n                                \\\"All of the voter's candidate are eliminated for voter: \\\",\\n                                _voter.walletAddress\\n                            );\\n                            emit CountVotes_ExhaustedVoterChoices(\\n                                _voter.walletAddress,\\n                                round.current()\\n                            );\\n                        }\\n                    }\\n                    //check if candidate exists and index is within bounds\\n                    if (\\n                        checkIfCandidateExist(_voter.voterChoices[index]) &&\\n                        index >= 0\\n                    ) {\\n                        Candidate storage _candidate = addressToCandidate[\\n                            _voter.voterChoices[index]\\n                        ];\\n                        _candidate.firstChoiceVoters.push(_voter.walletAddress);\\n                        _candidate.firstVotesCount = _candidate\\n                            .firstChoiceVoters\\n                            .length;\\n\\n                        console.log(\\n                            \\\"Candidate received vote from voter: \\\",\\n                            _voter.voterChoices[index]\\n                        );\\n\\n                        emit CountVotes_CandidateReceivedVoterFromTo(\\n                            _voter.walletAddress,\\n                            _fromCandidate,\\n                            _voter.voterChoices[index],\\n                            round.current()\\n                        );\\n\\n                        console.log(\\\"Voter Address\\\", _voter.walletAddress);\\n                        console.log(\\\"From\\\", _fromCandidate);\\n                        console.log(\\\"to\\\", _voter.voterChoices[index]);\\n\\n                        //TODO check if it is necessary to save candidate after updating its array if its already accessed by storage\\n                        addressToCandidate[\\n                            _voter.voterChoices[index]\\n                        ] = _candidate;\\n                    } else {\\n                        console.log(\\n                            \\\"All of the voter's candidate are eliminated\\\",\\n                            _voter.walletAddress\\n                        );\\n                        emit CountVotes_ExhaustedVoterChoices(\\n                            _voter.walletAddress,\\n                            round.current()\\n                        );\\n                    } //should we have an else part to give the point to the next choice if the current choice is already eliminated?\\n                }\\n            }\\n            console.log(\\\"--- Done distributing for this voter ---\\\");\\n        }\\n\\n        //clear firstChoiceVotersAddresses here\\n        while (firstChoiceVotersAddresses.length > 0) {\\n            firstChoiceVotersAddresses.pop();\\n        }\\n\\n        console.log(\\n            \\\"firstChoiceVotersAddresses.length\\\",\\n            firstChoiceVotersAddresses.length\\n        );\\n\\n        console.log(\\\"--- Finished Distributing Votes ---\\\");\\n    }\\n\\n    ////////////////////////\\n    /// Getter functions ///\\n    ////////////////////////\\n    function getCandidateByAddress(\\n        address _candidateAddress\\n    ) external view returns (Candidate memory) {\\n        if (addressToCandidate[_candidateAddress].id <= 0) {\\n            revert Voting_CandidateAddressDoesNotExist(_candidateAddress);\\n        }\\n        return addressToCandidate[_candidateAddress];\\n    }\\n\\n    function getVoterByAddress(\\n        address _voterAddress\\n    ) external view returns (Voter memory) {\\n        if (registeredVoters[_voterAddress].voterId <= 0) {\\n            revert Voting_VoterDoesNotExist(_voterAddress);\\n        }\\n        return registeredVoters[_voterAddress];\\n    }\\n\\n    function checkIfCandidateExist(\\n        address _candidateAddress\\n    ) public view returns (bool) {\\n        return (addressToCandidate[_candidateAddress].id > 0) ? true : false;\\n    }\\n\\n    function checkIfVoterExist(\\n        address _voterAddress\\n    ) public view returns (bool) {\\n        return (registeredVoters[_voterAddress].voterId > 0) ? true : false;\\n    }\\n\\n    function getNumberOfCandidates() public view returns (uint256) {\\n        return numberOfCandidates.current();\\n    }\\n\\n    function getWinner() public view returns (address) {\\n        //check - only allowed to call if isWinnerPicked is true\\n        if (isWinnerPicked == false) {\\n            revert PhaseThree_ThereIsNoWinnerYet();\\n        }\\n        return winner;\\n    }\\n\\n    function getLastVotingTimeStamp() public view returns (uint256) {\\n        return startTime;\\n    }\\n\\n    //Functions for Chainlink Automation\\n    function checkUpkeep(\\n        bytes memory /**checkData**/\\n    )\\n        public\\n        override\\n        returns (bool upkeepNeeded, bytes memory /**performData**/)\\n    {\\n        //will perform upkeep after 1 hour and no winner or tied candidates\\n        bool timePassed = ((block.timestamp - startTime) > 1 hours);\\n\\n        upkeepNeeded = (timePassed &&\\n            (isWinnerPicked == false || areAllActiveCandidatesTied == false));\\n    }\\n\\n    //will change the phases after specific time has passed - current time interval is 1 hour for testing purposes\\n    function performUpkeep(\\n        bytes calldata /** performData **/\\n    ) external override {\\n        (bool upkeepNeeded, ) = checkUpkeep(\\\"\\\");\\n        // check if time has passed and begin phase 2\\n        if (upkeepNeeded) {\\n            if (currentPhase == 1) {\\n                beginPhaseTwo();\\n                startTime = block.timestamp;\\n            } else if (currentPhase == 2) {\\n                beginPhaseThree();\\n                countVotes();\\n                getWinner();\\n            }\\n        } else {\\n            revert PerformUpKeep_NotEnoughTimeHasPassed();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x28607a5fc2e24d7fbca81dbf0ff74cc9eb323a43ed62f365aa1d3844bc60f5e1\",\"license\":\"MIT\"},\"hardhat/console.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >= 0.4.22 <0.9.0;\\n\\nlibrary console {\\n\\taddress constant CONSOLE_ADDRESS = address(0x000000000000000000636F6e736F6c652e6c6f67);\\n\\n\\tfunction _sendLogPayload(bytes memory payload) private view {\\n\\t\\tuint256 payloadLength = payload.length;\\n\\t\\taddress consoleAddress = CONSOLE_ADDRESS;\\n\\t\\tassembly {\\n\\t\\t\\tlet payloadStart := add(payload, 32)\\n\\t\\t\\tlet r := staticcall(gas(), consoleAddress, payloadStart, payloadLength, 0, 0)\\n\\t\\t}\\n\\t}\\n\\n\\tfunction log() internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log()\\\"));\\n\\t}\\n\\n\\tfunction logInt(int256 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(int256)\\\", p0));\\n\\t}\\n\\n\\tfunction logUint(uint256 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256)\\\", p0));\\n\\t}\\n\\n\\tfunction logString(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction logBool(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction logAddress(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes(bytes memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes1(bytes1 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes1)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes2(bytes2 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes2)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes3(bytes3 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes3)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes4(bytes4 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes4)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes5(bytes5 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes5)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes6(bytes6 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes6)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes7(bytes7 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes7)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes8(bytes8 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes8)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes9(bytes9 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes9)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes10(bytes10 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes10)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes11(bytes11 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes11)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes12(bytes12 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes12)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes13(bytes13 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes13)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes14(bytes14 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes14)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes15(bytes15 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes15)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes16(bytes16 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes16)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes17(bytes17 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes17)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes18(bytes18 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes18)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes19(bytes19 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes19)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes20(bytes20 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes20)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes21(bytes21 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes21)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes22(bytes22 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes22)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes23(bytes23 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes23)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes24(bytes24 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes24)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes25(bytes25 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes25)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes26(bytes26 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes26)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes27(bytes27 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes27)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes28(bytes28 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes28)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes29(bytes29 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes29)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes30(bytes30 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes30)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes31(bytes31 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes31)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes32(bytes32 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes32)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint256 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256)\\\", p0));\\n\\t}\\n\\n\\tfunction log(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction log(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction log(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n}\\n\",\"keccak256\":\"0x60b0215121bf25612a6739fb2f1ec35f31ee82e4a8216c032c8243d904ab3aa9\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5033600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000600360146101000a81548160ff0219169083151502179055506001600960006101000a81548161ffff021916908361ffff16021790555042600a819055506163db80620000a26000396000f3fe608060405234801561001057600080fd5b506004361061012c5760003560e01c806380e80021116100ad578063b647990a11610071578063b647990a14610322578063d25214291461032c578063d305bcb614610336578063dfbf53ae14610340578063f7610be01461035e5761012c565b806380e80021146102a25780638b98e7b1146102ac5780638e7ea5b2146102b65780639bcc3361146102d4578063ad25e829146102f25761012c565b80634585e33b116100f45780634585e33b146101e95780634bdd7585146102055780636e04ff0d146102355780637061bfcf146102665780637a84d13e146102845761012c565b80630aa0567714610131578063193add061461014f5780631e4800341461017f5780632b929d641461019d578063321a0489146101b9575b600080fd5b61013961037a565b604051610146919061513c565b60405180910390f35b61016960048036038101906101649190615197565b6103a0565b60405161017691906151df565b60405180910390f35b6101876103fc565b6040516101949190615213565b60405180910390f35b6101b760048036038101906101b29190615374565b610406565b005b6101d360048036038101906101ce9190615197565b610861565b6040516101e091906151df565b60405180910390f35b61020360048036038101906101fe919061541d565b6108bd565b005b61021f600480360381019061021a9190615197565b610985565b60405161022c91906155cf565b60405180910390f35b61024f600480360381019061024a9190615692565b610ba4565b60405161025d929190615763565b60405180910390f35b61026e610c04565b60405161027b9190615213565b60405180910390f35b61028c610c10565b6040516102999190615213565b60405180910390f35b6102aa610c21565b005b6102b4610dc0565b005b6102be611153565b6040516102cb919061513c565b60405180910390f35b6102dc6111ca565b6040516102e99190615213565b60405180910390f35b61030c60048036038101906103079190615197565b6111d6565b604051610319919061589f565b60405180910390f35b61032a611481565b005b6103346117ec565b005b61033e611c43565b005b610348611de2565b604051610355919061513c565b60405180910390f35b610378600480360381019061037391906158c1565b611e08565b005b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600080600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000154116103f25760006103f5565b60015b9050919050565b6000600a54905090565b6001600960009054906101000a900461ffff1661ffff168161ffff161461047657600960009054906101000a900461ffff16816040517f9b068a9900000000000000000000000000000000000000000000000000000000815260040161046d929190615931565b60405180910390fd5b61047f336103a0565b156104c157336040517fa4a2360c0000000000000000000000000000000000000000000000000000000081526004016104b8919061513c565b60405180910390fd5b6104cb600461277c565b6104d5600561277c565b6104df600e61277c565b60006104eb6004612792565b9050606060006040518061010001604052808481526020018681526020013373ffffffffffffffffffffffffffffffffffffffff168152602001838152602001600081526020016000151581526020016000151581526020016000815250905080600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000820151816000015560208201518160010190805190602001906105b1929190614ddd565b5060408201518160020160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506060820151816003019080519060200190610615929190614e63565b506080820151816004015560a08201518160050160006101000a81548160ff02191690831515021790555060c08201518160050160016101000a81548160ff02191690831515021790555060e082015181600601559050506000339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506107466040518060400160405280601381526020017f456e74657265642063616e6469646174653a2000000000000000000000000000815250866040518060400160405280601081526020017f2066726f6d2061646472657373203a2000000000000000000000000000000000815250336127a0565b806040015173ffffffffffffffffffffffffffffffffffffffff1681602001516040516107739190615996565b604051809103902082600001517f548af351e0d3cac7bd58378a494326c2989919dca076c78773a389b714bfcbd160405160405180910390a46000600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600001541161085a576107fe610dc0565b6001600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060030160026101000a81548160ff0219169083151502179055505b5050505050565b600080600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000154116108b35760006108b6565b60015b9050919050565b60006108d760405180602001604052806000815250610ba4565b509050801561094e576001600960009054906101000a900461ffff1661ffff16141561091157610905610c21565b42600a81905550610949565b6002600960009054906101000a900461ffff1661ffff16141561094857610936611c43565b61093e611481565b610946611153565b505b5b610980565b6040517f70e428b000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b505050565b61098d614eed565b6000600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000015411610a1457816040517f29869395000000000000000000000000000000000000000000000000000000008152600401610a0b919061513c565b60405180910390fd5b600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206040518060c0016040529081600082015481526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200160028201805480602002602001604051908101604052809291908181526020018280548015610b4357602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311610af9575b505050505081526020016003820160009054906101000a900460ff161515151581526020016003820160019054906101000a900460ff161515151581526020016003820160029054906101000a900460ff1615151515815250509050919050565b600060606000610e10600a5442610bbb91906159dc565b119050808015610bfc575060001515600360149054906101000a900460ff1615151480610bfb575060001515600360159054906101000a900460ff161515145b5b925050915091565b60088060000154905081565b6000610c1c6005612792565b905090565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610cb357336040517fec880c13000000000000000000000000000000000000000000000000000000008152600401610caa919061513c565b60405180910390fd5b6001600960009054906101000a900461ffff1661ffff168161ffff1614610d2357600960009054906101000a900461ffff16816040517f9b068a99000000000000000000000000000000000000000000000000000000008152600401610d1a929190615931565b60405180910390fd5b610d616040518060400160405280600c81526020017f5068617365203120456e64730000000000000000000000000000000000000000815250612842565b6002600960006101000a81548161ffff021916908361ffff160217905550610dbd6040518060400160405280600d81526020017f426567696e205068617365203200000000000000000000000000000000000000815250612842565b50565b6001600960009054906101000a900461ffff1661ffff168161ffff1614610e3057600960009054906101000a900461ffff16816040517f9b068a99000000000000000000000000000000000000000000000000000000008152600401610e27929190615931565b60405180910390fd5b610e3933610861565b8015610e98575060001515600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060030160029054906101000a900460ff161515145b15610eda57336040517fa7ebb3c2000000000000000000000000000000000000000000000000000000008152600401610ed1919061513c565b60405180910390fd5b610ee333610861565b8015610f42575060011515600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060030160029054906101000a900460ff161515145b15610f8457336040517fa7ebb3c2000000000000000000000000000000000000000000000000000000008152600401610f7b919061513c565b60405180910390fd5b610f8e600661277c565b610f98600761277c565b6000610fa46006612792565b9050606060006040518060c001604052808481526020013373ffffffffffffffffffffffffffffffffffffffff16815260200183815260200160001515815260200160011515815260200160001515815250905080600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000820151816000015560208201518160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060408201518160020190805190602001906110a5929190614e63565b5060608201518160030160006101000a81548160ff02191690831515021790555060808201518160030160016101000a81548160ff02191690831515021790555060a08201518160030160026101000a81548160ff0219169083151502179055509050503373ffffffffffffffffffffffffffffffffffffffff16837ff45b8429c36d478f9a6d081c4811a819b98aa5b608588bed9d406405cf28247360405160405180910390a350505050565b6000801515600360149054906101000a900460ff16151514156111a2576040517f944558c800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60078060000154905081565b6111de614f3f565b6000600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600001541161126557816040517f098e625800000000000000000000000000000000000000000000000000000000815260040161125c919061513c565b60405180910390fd5b600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060405180610100016040529081600082015481526020016001820180546112ca90615a3f565b80601f01602080910402602001604051908101604052809291908181526020018280546112f690615a3f565b80156113435780601f1061131857610100808354040283529160200191611343565b820191906000526020600020905b81548152906001019060200180831161132657829003601f168201915b505050505081526020016002820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016003820180548060200260200160405190810160405280929190818152602001828054801561142757602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190600101908083116113dd575b50505050508152602001600482015481526020016005820160009054906101000a900460ff161515151581526020016005820160019054906101000a900460ff161515151581526020016006820154815250509050919050565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461151357336040517fec880c1300000000000000000000000000000000000000000000000000000000815260040161150a919061513c565b60405180910390fd5b6003600960009054906101000a900461ffff1661ffff168161ffff161461158357600960009054906101000a900461ffff16816040517f9b068a9900000000000000000000000000000000000000000000000000000000815260040161157a929190615931565b60405180910390fd5b600061158f6008612792565b9050600060016002836115a29190615aa0565b6115ac9190615ad1565b90505b60001515600360149054906101000a900460ff1615151480156115e5575060001515600360159054906101000a900460ff161515145b156117e7576115f3816128db565b6116246040518060600160405280602e8152602001616378602e9139600360149054906101000a900460ff16613c91565b6116686040518060400160405280601f81526020017f46697273742063686f69636520766f746573206172726179206c656e67746800815250600d80549050613d2d565b6116936040518060600160405280602281526020016163226022913961168e600e612792565b613d2d565b60001515600360149054906101000a900460ff1615151480156116c9575060001515600360159054906101000a900460ff161515145b156117445761170c6040518060400160405280601281526020017f446973747269627574696e6720766f7465730000000000000000000000000000815250612842565b611714613dc9565b61173f6040518060600160405280602d8152602001616225602d913961173a600e612792565b613d2d565b6117e2565b60001515600360149054906101000a900460ff16151514801561177a575060011515600360159054906101000a900460ff161515145b156117e1576117a06040518060600160405280602c815260200161604e602c9139612842565b7f208e1b5c9ff492c984901690e40e7b1f9f15ec4959979edc1e6cc8de8716e2686117cb600c612792565b6040516117d89190615213565b60405180910390a15b5b6115af565b505050565b6001600960009054906101000a900461ffff1661ffff168161ffff161461185c57600960009054906101000a900461ffff16816040517f9b068a99000000000000000000000000000000000000000000000000000000008152600401611853929190615931565b60405180910390fd5b6000600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000154116118e357336040517f098e62580000000000000000000000000000000000000000000000000000000081526004016118da919061513c565b60405180910390fd5b6000600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020604051806101000160405290816000820154815260200160018201805461194a90615a3f565b80601f016020809104026020016040519081016040528092919081815260200182805461197690615a3f565b80156119c35780601f10611998576101008083540402835291602001916119c3565b820191906000526020600020905b8154815290600101906020018083116119a657829003601f168201915b505050505081526020016002820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200160038201805480602002602001604051908101604052809291908181526020018280548015611aa757602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311611a5d575b50505050508152602001600482015481526020016005820160009054906101000a900460ff161515151581526020016005820160019054906101000a900460ff161515151581526020016006820154815250509050600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600080820160009055600182016000611b549190614f9e565b6002820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff0219169055600382016000611b8b9190614fde565b60048201600090556005820160006101000a81549060ff02191690556005820160016101000a81549060ff021916905560068201600090555050611bcf6005614ad9565b611bd9600e614ad9565b806040015173ffffffffffffffffffffffffffffffffffffffff168160200151604051611c069190615996565b604051809103902082600001517fca4cd4e7e4bac7a6adbcfcb5bcb9f3b106e667bbe038fbee3c5635c5fbd80ed260405160405180910390a45050565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614611cd557336040517fec880c13000000000000000000000000000000000000000000000000000000008152600401611ccc919061513c565b60405180910390fd5b6002600960009054906101000a900461ffff1661ffff168161ffff1614611d4557600960009054906101000a900461ffff16816040517f9b068a99000000000000000000000000000000000000000000000000000000008152600401611d3c929190615931565b60405180910390fd5b611d836040518060400160405280600c81526020017f5068617365203220456e64730000000000000000000000000000000000000000815250612842565b6003600960006101000a81548161ffff021916908361ffff160217905550611ddf6040518060400160405280600e81526020017f5068617365203320426567696e73000000000000000000000000000000000000815250612842565b50565b600b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60001515611e1533610861565b15151415611e5a57336040517f29869395000000000000000000000000000000000000000000000000000000008152600401611e51919061513c565b60405180910390fd5b82828260001515611e6a846103a0565b15151415611eaf57826040517f098e6258000000000000000000000000000000000000000000000000000000008152600401611ea6919061513c565b60405180910390fd5b60001515611ebc836103a0565b15151415611f0157816040517f098e6258000000000000000000000000000000000000000000000000000000008152600401611ef8919061513c565b60405180910390fd5b60001515611f0e826103a0565b15151415611f5357806040517f098e6258000000000000000000000000000000000000000000000000000000008152600401611f4a919061513c565b60405180910390fd5b8585858173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161480611fbb57508073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16145b80611ff157508073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16145b1561203357336040517fe767036100000000000000000000000000000000000000000000000000000000815260040161202a919061513c565b60405180910390fd5b6002600960009054906101000a900461ffff1661ffff168161ffff16146120a357600960009054906101000a900461ffff16816040517f9b068a9900000000000000000000000000000000000000000000000000000000815260040161209a929190615931565b60405180910390fd5b6000600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000209050600015158160030160019054906101000a900460ff161515141561214157336040517f4bb12981000000000000000000000000000000000000000000000000000000008152600401612138919061513c565b60405180910390fd5b600115158160030160009054906101000a900460ff161515141561219c57336040517f5c920d70000000000000000000000000000000000000000000000000000000008152600401612193919061513c565b60405180910390fd5b6000600160008d73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020905080600301339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508060030180549050816004018190555080600160008e73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000820154816000015560018201816001019080546122b290615a3f565b6122bd929190614fff565b506002820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168160020160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600382018160030190805461233b92919061508c565b50600482015481600401556005820160009054906101000a900460ff168160050160006101000a81548160ff0219169083151502179055506005820160019054906101000a900460ff168160050160016101000a81548160ff02191690831515021790555060068201548160060155905050816002018a9080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550816002018b9080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550816002018c9080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060018260030160006101000a81548160ff02191690831515021790555081600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082015481600001556001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060028201816002019080546125c092919061508c565b506003820160009054906101000a900460ff168160030160006101000a81548160ff0219169083151502179055506003820160019054906101000a900460ff168160030160016101000a81548160ff0219169083151502179055506003820160029054906101000a900460ff168160030160026101000a81548160ff021916908315150217905550905050612655600861277c565b6126ee6040518060400160405280600781526020017f566f7465723a20000000000000000000000000000000000000000000000000008152508360010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166040518060400160405280600b81526020017f206a75737420766f746564000000000000000000000000000000000000000000815250614b35565b8160010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1682600001547f1df7a981f2b7c2d90635bc06e912ebd86795304133dc9ed98317c89e8fdce36f846002018f8f8f6040516127669493929190615c24565b60405180910390a3505050505050505050505050565b6001816000016000828254019250508190555050565b600081600001549050919050565b61283c848484846040516024016127ba9493929190615cba565b6040516020818303038152906040527f6d572f44000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050614bd4565b50505050565b6128d8816040516024016128569190615d14565b6040516020818303038152906040527f41304fac000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050614bd4565b50565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461296d57336040517fec880c13000000000000000000000000000000000000000000000000000000008152600401612964919061513c565b60405180910390fd5b6003600960009054906101000a900461ffff1661ffff168161ffff16146129dd57600960009054906101000a900461ffff16816040517f9b068a990000000000000000000000000000000000000000000000000000000081526004016129d4929190615931565b60405180910390fd5b6129e7600c61277c565b612a086040518060600160405280602481526020016162fe60249139612842565b612a506040518060400160405280600781526020017f524f554e443a2000000000000000000000000000000000000000000000000000815250612a4b600c612792565b613d2d565b600080839050612a956040518060400160405280600b81526020017f48696768657374566f746500000000000000000000000000000000000000000081525083613d2d565b612ad46040518060400160405280600a81526020017f4c6f77657374566f74650000000000000000000000000000000000000000000081525082613d2d565b612b1c6040518060400160405280601481526020017f4e756d626572206f662063616e64696461746573000000000000000000000000815250612b17600e612792565b613d2d565b60005b612b296005612792565b81101561321d576000808281548110612b4557612b44615d36565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060011515612b7f826103a0565b15151415613209576000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206040518061010001604052908160008201548152602001600182018054612bee90615a3f565b80601f0160208091040260200160405190810160405280929190818152602001828054612c1a90615a3f565b8015612c675780601f10612c3c57610100808354040283529160200191612c67565b820191906000526020600020905b815481529060010190602001808311612c4a57829003601f168201915b505050505081526020016002820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200160038201805480602002602001604051908101604052809291908181526020018280548015612d4b57602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311612d01575b50505050508152602001600482015481526020016005820160009054906101000a900460ff161515151581526020016005820160019054906101000a900460ff161515151581526020016006820154815250509050612e166040518060400160405280601f81526020017f2d2d2d2d2d20436865636b696e672063616e6469646174653a202d2d2d2d2d00815250836040518060400160405280600a81526020017f20617420696e646578200000000000000000000000000000000000000000000081525086614bfd565b612e596040518060400160405280601181526020017f4e756d626572206f6620766f7465733a200000000000000000000000000000008152508260800151613d2d565b600081608001511415612fda57612ea56040518060400160405280601b81526020017f44656c6574696e67203020766f74652063616e6469646174653a20000000000081525083614c9f565b600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600080820160009055600182016000612efd9190614f9e565b6002820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff0219169055600382016000612f349190614fde565b60048201600090556005820160006101000a81549060ff02191690556005820160016101000a81549060ff0219169055600682016000905550508173ffffffffffffffffffffffffffffffffffffffff167f20ac7292cd739ac1856c1820528eab26326d67d059c8c2655e5b0f74e50166cb8260800151612fb5600c612792565b604051612fc3929190615d65565b60405180910390a2612fd5600e614ad9565b61312a565b8681608001511061312957806080015194508060400151600b60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506001600360146101000a81548160ff0219169083151502179055506130ad6040518060400160405280601f81526020017f5265616368656420746872657368686f6c6420666f756e642077696e6e657200815250600b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16614c9f565b600b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167fdd9fa82e49a52e31beac4bcbf7929f7baed9b1d0b8f111f05a389aacf0cabb1c86613112600c612792565b604051613120929190615d65565b60405180910390a25b5b60011515613137836103a0565b151514156131e5578381608001511161319157806080015193506131906040518060400160405280601b81526020017f6c6f77657374566f746520616674657220636f6d70617269736f6e000000000081525085613d2d565b5b84816080015111156131e457806080015194506131e36040518060400160405280601c81526020017f68696768657374566f746520616674657220636f6d70617269736f6e0000000081525085613d2d565b5b5b6132076040518060600160405280602e81526020016162a5602e913984613d2d565b505b50808061321590615d8e565b915050612b1f565b5080821415613242576001600360156101000a81548160ff0219169083151502179055505b60001515600360149054906101000a900460ff161515148015613278575060001515600360159054906101000a900460ff161515145b15613c8b5761329e60405180606001604052806031815260200161614b60319139612842565b6132dd6040518060400160405280600c81526020017f4869676865737420766f7465000000000000000000000000000000000000000081525083613d2d565b61331c6040518060400160405280600b81526020017f4c6f7765737420766f746500000000000000000000000000000000000000000081525082613d2d565b60005b6133296005612792565b8110156138f357600080828154811061334557613344615d36565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690506001151561337f826103a0565b151514156138df576000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060405180610100016040529081600082015481526020016001820180546133ee90615a3f565b80601f016020809104026020016040519081016040528092919081815260200182805461341a90615a3f565b80156134675780601f1061343c57610100808354040283529160200191613467565b820191906000526020600020905b81548152906001019060200180831161344a57829003601f168201915b505050505081526020016002820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016003820180548060200260200160405190810160405280929190818152602001828054801561354b57602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311613501575b50505050508152602001600482015481526020016005820160009054906101000a900460ff161515151581526020016005820160019054906101000a900460ff161515151581526020016006820154815250509050838160800151141561388b5760018160a0019015159081151581525050806040015173ffffffffffffffffffffffffffffffffffffffff167f822ba652eecc23b3a93ed416af9821c1cfb7837abe0f4ab4fe98f71f43a3eaf98260800151613608600c612792565b604051613616929190615d65565b60405180910390a261364460405180606001604052806032815260200161617c603291398260400151614c9f565b6136876040518060400160405280601481526020017f2e2e2e7769746820766f746520636f756e743a200000000000000000000000008152508260800151613d2d565b6000816080015111156137b7576136b56040518060600160405280602b81526020016162d3602b9139612842565b60005b81608001518110156137b557600d826060015182815181106136dd576136dc615d36565b5b60200260200101519080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506137a26040518060400160405280600381526020017f2e2e2e00000000000000000000000000000000000000000000000000000000008152508360600151838151811061379557613794615d36565b5b6020026020010151614c9f565b80806137ad90615d8e565b9150506136b8565b505b600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008082016000905560018201600061380f9190614f9e565b6002820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690556003820160006138469190614fde565b60048201600090556005820160006101000a81549060ff02191690556005820160016101000a81549060ff02191690556006820160009055505061388a600e614ad9565b5b84816080015114156138dd578060400151600b60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b505b5080806138eb90615d8e565b91505061331f565b506001613900600e612792565b1415613c6957600060016000600b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020604051806101000160405290816000820154815260200160018201805461398f90615a3f565b80601f01602080910402602001604051908101604052809291908181526020018280546139bb90615a3f565b8015613a085780601f106139dd57610100808354040283529160200191613a08565b820191906000526020600020905b8154815290600101906020018083116139eb57829003601f168201915b505050505081526020016002820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200160038201805480602002602001604051908101604052809291908181526020018280548015613aec57602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311613aa2575b50505050508152602001600482015481526020016005820160009054906101000a900460ff161515151581526020016005820160019054906101000a900460ff161515151581526020016006820154815250509050806080015192508060400151600b60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506001600360146101000a81548160ff021916908315150217905550613bec6040518060600160405280602581526020016161ae60259139600b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16614c9f565b600b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f2c7e052d6f1bd2194b1213d6c3179d42b6009f8d45dc4efd6fff510f2593c4ae84613c51600c612792565b604051613c5f929190615d65565b60405180910390a2505b613c8a6040518060600160405280603281526020016160c160329139612842565b5b50505050565b613d298282604051602401613ca7929190615dd7565b6040516020818303038152906040527fc3b55635000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050614bd4565b5050565b613dc58282604051602401613d43929190615e07565b6040516020818303038152906040527fb60e72cc000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050614bd4565b5050565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614613e5b57336040517fec880c13000000000000000000000000000000000000000000000000000000008152600401613e52919061513c565b60405180910390fd5b6003600960009054906101000a900461ffff1661ffff168161ffff1614613ecb57600960009054906101000a900461ffff16816040517f9b068a99000000000000000000000000000000000000000000000000000000008152600401613ec2929190615931565b60405180910390fd5b613ef260405180606001604052806034815260200161634460349139600d80549050613d2d565b60005b600d80549050811015614a3257600060026000600d8481548110613f1c57613f1b615d36565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002090506140006040518060400160405280601981526020017f2d2d2d204469737472696275746520766f7465723a202d2d2d00000000000000815250600d8481548110613fd057613fcf615d36565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16614c9f565b6000816002018054905011156149fd576000816002016001836002018054905061402a91906159dc565b8154811061403b5761403a615d36565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508160020180548061407c5761407b615e37565b5b6001900381819060005260206000200160006101000a81549073ffffffffffffffffffffffffffffffffffffffff021916905590556000826002018054905011156149fb576000600183600201805490506140d791906159dc565b9050600015156141268460020183815481106140f6576140f5615d36565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166103a0565b151514156143df578260020180548061414257614141615e37565b5b6001900381819060005260206000200160006101000a81549073ffffffffffffffffffffffffffffffffffffffff0219169055905560008360020180549050111561431c576001836002018054905061419b91906159dc565b905061425a6040518060800160405280605281526020016161d3605291398460020183815481106141cf576141ce615d36565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166040518060400160405280600f81526020017f2c2066726f6d20766f746572203a2000000000000000000000000000000000008152508660010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16614d3b565b8260010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f103341034b4110e9c0de42a7bf6ed01694246e04f94eeeba46a37720b7d4f3e28460020183815481106142cc576142cb615d36565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16614301600c612792565b60405161430f929190615e66565b60405180910390a26143de565b614362604051806060016040528060378152602001616114603791398460010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16614c9f565b8260010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f2581b630586fe0a7a8a85fb2474d79828acfaca8938a93ae82994a08502db77a6143c8600c612792565b6040516143d59190615213565b60405180910390a25b5b6144288360020182815481106143f8576143f7615d36565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166103a0565b8015614435575060008110155b156149375760006001600085600201848154811061445657614455615d36565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000209050806003018460010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550806003018054905081600401819055506145b860405180606001604052806024815260200161607a6024913985600201848154811061458857614587615d36565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16614c9f565b8360010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f075046d5bd061445e5e003ef23b4f462b7dd602982758cabf8c1ee162333bb678486600201858154811061462b5761462a615d36565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16614660600c612792565b60405161466f93929190615e8f565b60405180910390a26146da6040518060400160405280600d81526020017f566f7465722041646472657373000000000000000000000000000000000000008152508560010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16614c9f565b6147196040518060400160405280600481526020017f46726f6d0000000000000000000000000000000000000000000000000000000081525084614c9f565b6147986040518060400160405280600281526020017f746f00000000000000000000000000000000000000000000000000000000000081525085600201848154811061476857614767615d36565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16614c9f565b80600160008660020185815481106147b3576147b2615d36565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008201548160000155600182018160010190805461483690615a3f565b614841929190614fff565b506002820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168160020160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060038201816003019080546148bf92919061508c565b50600482015481600401556005820160009054906101000a900460ff168160050160006101000a81548160ff0219169083151502179055506005820160019054906101000a900460ff168160050160016101000a81548160ff02191690831515021790555060068201548160060155905050506149f9565b61497d6040518060600160405280602b815260200161627a602b91398460010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16614c9f565b8260010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f2581b630586fe0a7a8a85fb2474d79828acfaca8938a93ae82994a08502db77a6149e3600c612792565b6040516149f09190615213565b60405180910390a25b505b505b614a1e60405180606001604052806028815260200161625260289139612842565b508080614a2a90615d8e565b915050613ef5565b505b6000600d805490501115614a8e57600d805480614a5457614a53615e37565b5b6001900381819060005260206000200160006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690559055614a34565b614ab56040518060600160405280602181526020016160f360219139600d80549050613d2d565b614ad660405180606001604052806023815260200161609e60239139612842565b50565b60008160000154905060008111614b25576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401614b1c90615f12565b60405180910390fd5b6001810382600001819055505050565b614bcf838383604051602401614b4d93929190615f32565b6040516020818303038152906040527fe0e9ad4f000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050614bd4565b505050565b60008151905060006a636f6e736f6c652e6c6f679050602083016000808483855afa5050505050565b614c9984848484604051602401614c179493929190615f77565b6040516020818303038152906040527f91d1112e000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050614bd4565b50505050565b614d378282604051602401614cb5929190615fca565b6040516020818303038152906040527f319af333000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050614bd4565b5050565b614dd784848484604051602401614d559493929190615ffa565b6040516020818303038152906040527faabc9a31000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050614bd4565b50505050565b828054614de990615a3f565b90600052602060002090601f016020900481019282614e0b5760008555614e52565b82601f10614e2457805160ff1916838001178555614e52565b82800160010185558215614e52579182015b82811115614e51578251825591602001919060010190614e36565b5b509050614e5f91906150de565b5090565b828054828255906000526020600020908101928215614edc579160200282015b82811115614edb5782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190614e83565b5b509050614ee991906150de565b5090565b6040518060c0016040528060008152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001606081526020016000151581526020016000151581526020016000151581525090565b6040518061010001604052806000815260200160608152602001600073ffffffffffffffffffffffffffffffffffffffff1681526020016060815260200160008152602001600015158152602001600015158152602001600081525090565b508054614faa90615a3f565b6000825580601f10614fbc5750614fdb565b601f016020900490600052602060002090810190614fda91906150de565b5b50565b5080546000825590600052602060002090810190614ffc91906150de565b50565b82805461500b90615a3f565b90600052602060002090601f01602090048101928261502d576000855561507b565b82601f1061503e578054855561507b565b8280016001018555821561507b57600052602060002091601f016020900482015b8281111561507a57825482559160010191906001019061505f565b5b50905061508891906150de565b5090565b8280548282559060005260206000209081019282156150cd5760005260206000209182015b828111156150cc5782548255916001019190600101906150b1565b5b5090506150da91906150de565b5090565b5b808211156150f75760008160009055506001016150df565b5090565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000615126826150fb565b9050919050565b6151368161511b565b82525050565b6000602082019050615151600083018461512d565b92915050565b6000604051905090565b600080fd5b600080fd5b6151748161511b565b811461517f57600080fd5b50565b6000813590506151918161516b565b92915050565b6000602082840312156151ad576151ac615161565b5b60006151bb84828501615182565b91505092915050565b60008115159050919050565b6151d9816151c4565b82525050565b60006020820190506151f460008301846151d0565b92915050565b6000819050919050565b61520d816151fa565b82525050565b60006020820190506152286000830184615204565b92915050565b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b61528182615238565b810181811067ffffffffffffffff821117156152a05761529f615249565b5b80604052505050565b60006152b3615157565b90506152bf8282615278565b919050565b600067ffffffffffffffff8211156152df576152de615249565b5b6152e882615238565b9050602081019050919050565b82818337600083830152505050565b6000615317615312846152c4565b6152a9565b90508281526020810184848401111561533357615332615233565b5b61533e8482856152f5565b509392505050565b600082601f83011261535b5761535a61522e565b5b813561536b848260208601615304565b91505092915050565b60006020828403121561538a57615389615161565b5b600082013567ffffffffffffffff8111156153a8576153a7615166565b5b6153b484828501615346565b91505092915050565b600080fd5b600080fd5b60008083601f8401126153dd576153dc61522e565b5b8235905067ffffffffffffffff8111156153fa576153f96153bd565b5b602083019150836001820283011115615416576154156153c2565b5b9250929050565b6000806020838503121561543457615433615161565b5b600083013567ffffffffffffffff81111561545257615451615166565b5b61545e858286016153c7565b92509250509250929050565b615473816151fa565b82525050565b6154828161511b565b82525050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b60006154c08383615479565b60208301905092915050565b6000602082019050919050565b60006154e482615488565b6154ee8185615493565b93506154f9836154a4565b8060005b8381101561552a57815161551188826154b4565b975061551c836154cc565b9250506001810190506154fd565b5085935050505092915050565b615540816151c4565b82525050565b600060c08301600083015161555e600086018261546a565b5060208301516155716020860182615479565b506040830151848203604086015261558982826154d9565b915050606083015161559e6060860182615537565b5060808301516155b16080860182615537565b5060a08301516155c460a0860182615537565b508091505092915050565b600060208201905081810360008301526155e98184615546565b905092915050565b600067ffffffffffffffff82111561560c5761560b615249565b5b61561582615238565b9050602081019050919050565b6000615635615630846155f1565b6152a9565b90508281526020810184848401111561565157615650615233565b5b61565c8482856152f5565b509392505050565b600082601f8301126156795761567861522e565b5b8135615689848260208601615622565b91505092915050565b6000602082840312156156a8576156a7615161565b5b600082013567ffffffffffffffff8111156156c6576156c5615166565b5b6156d284828501615664565b91505092915050565b600081519050919050565b600082825260208201905092915050565b60005b838110156157155780820151818401526020810190506156fa565b83811115615724576000848401525b50505050565b6000615735826156db565b61573f81856156e6565b935061574f8185602086016156f7565b61575881615238565b840191505092915050565b600060408201905061577860008301856151d0565b818103602083015261578a818461572a565b90509392505050565b600081519050919050565b600082825260208201905092915050565b60006157ba82615793565b6157c4818561579e565b93506157d48185602086016156f7565b6157dd81615238565b840191505092915050565b600061010083016000830151615801600086018261546a565b506020830151848203602086015261581982826157af565b915050604083015161582e6040860182615479565b506060830151848203606086015261584682826154d9565b915050608083015161585b608086018261546a565b5060a083015161586e60a0860182615537565b5060c083015161588160c0860182615537565b5060e083015161589460e086018261546a565b508091505092915050565b600060208201905081810360008301526158b981846157e8565b905092915050565b6000806000606084860312156158da576158d9615161565b5b60006158e886828701615182565b93505060206158f986828701615182565b925050604061590a86828701615182565b9150509250925092565b600061ffff82169050919050565b61592b81615914565b82525050565b60006040820190506159466000830185615922565b6159536020830184615922565b9392505050565b600081905092915050565b600061597082615793565b61597a818561595a565b935061598a8185602086016156f7565b80840191505092915050565b60006159a28284615965565b915081905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006159e7826151fa565b91506159f2836151fa565b925082821015615a0557615a046159ad565b5b828203905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680615a5757607f821691505b60208210811415615a6b57615a6a615a10565b5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000615aab826151fa565b9150615ab6836151fa565b925082615ac657615ac5615a71565b5b828204905092915050565b6000615adc826151fa565b9150615ae7836151fa565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115615b1c57615b1b6159ad565b5b828201905092915050565b600081549050919050565b600082825260208201905092915050565b60008190508160005260206000209050919050565b60008160001c9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000615b98615b9383615b58565b615b65565b9050919050565b6000615bab8254615b85565b9050919050565b6000600182019050919050565b6000615bca82615b27565b615bd48185615b32565b9350615bdf83615b43565b8060005b83811015615c1757615bf482615b9f565b615bfe88826154b4565b9750615c0983615bb2565b925050600181019050615be3565b5085935050505092915050565b60006080820190508181036000830152615c3e8187615bbf565b9050615c4d602083018661512d565b615c5a604083018561512d565b615c67606083018461512d565b95945050505050565b600082825260208201905092915050565b6000615c8c82615793565b615c968185615c70565b9350615ca68185602086016156f7565b615caf81615238565b840191505092915050565b60006080820190508181036000830152615cd48187615c81565b90508181036020830152615ce88186615c81565b90508181036040830152615cfc8185615c81565b9050615d0b606083018461512d565b95945050505050565b60006020820190508181036000830152615d2e8184615c81565b905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6000604082019050615d7a6000830185615204565b615d876020830184615204565b9392505050565b6000615d99826151fa565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415615dcc57615dcb6159ad565b5b600182019050919050565b60006040820190508181036000830152615df18185615c81565b9050615e0060208301846151d0565b9392505050565b60006040820190508181036000830152615e218185615c81565b9050615e306020830184615204565b9392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fd5b6000604082019050615e7b600083018561512d565b615e886020830184615204565b9392505050565b6000606082019050615ea4600083018661512d565b615eb1602083018561512d565b615ebe6040830184615204565b949350505050565b7f436f756e7465723a2064656372656d656e74206f766572666c6f770000000000600082015250565b6000615efc601b83615c70565b9150615f0782615ec6565b602082019050919050565b60006020820190508181036000830152615f2b81615eef565b9050919050565b60006060820190508181036000830152615f4c8186615c81565b9050615f5b602083018561512d565b8181036040830152615f6d8184615c81565b9050949350505050565b60006080820190508181036000830152615f918187615c81565b9050615fa0602083018661512d565b8181036040830152615fb28185615c81565b9050615fc16060830184615204565b95945050505050565b60006040820190508181036000830152615fe48185615c81565b9050615ff3602083018461512d565b9392505050565b600060808201905081810360008301526160148187615c81565b9050616023602083018661512d565b81810360408301526160358185615c81565b9050616044606083018461512d565b9594505050505056fe416c6c2063616e6469646174657320617265207469656420616674657220636f756e74696e6720766f74657343616e64696461746520726563656976656420766f74652066726f6d20766f7465723a202d2d2d2046696e697368656420446973747269627574696e6720566f746573202d2d2d2d2d2d46696e697368656420656c696d696e6174696e67206c6f7765737420766f74652063616e64696461746573202d2d2d666972737443686f696365566f746572734164647265737365732e6c656e677468416c6c206f662074686520766f74657227732063616e6469646174652061726520656c696d696e6174656420666f7220766f7465723a202d2d2d20537461727420656c696d696e6174696e67206c6f7765737420766f74652063616e64696461746573202d2d2d2d43616e64696461746520726563656976656420746865206c6f7765737420766f74657320616e6420656c696d696e617465644f6e6c79206f6e652063616e646964617465206c6566742c20666f756e642077696e6e65724e6578742063616e64696461746520697320656c696d696e6174656420736f206469737472696275746520746865206e6578742063686f6963652063616e646964617465202833726420766f74657229203a4e756d626572206f662063616e6469646174657320616674657220646973747269627574696e6720766f7465732d2d2d20446f6e6520646973747269627574696e6720666f72207468697320766f746572202d2d2d416c6c206f662074686520766f74657227732063616e6469646174652061726520656c696d696e617465642d2d2d2046696e697368656420636f756e74696e6720766f74657320666f722063616e646964617465202d2d2d2d546865736520766f746572732077696c6c20676f20746f207468656972206e6578742063686f6963653a202d2d2d2d2d20434f554e542046495253542043484f49434520564f544553202d2d2d2d2d4e756d626572206f66206163746976652063616e64696461746573206c6566743a202d2d2d204469737472696275746520766f7465732066726f6d206c6f7765737420766f74652063616e64696461746573202d2d2d697357696e6e65725069636b6564206265666f726520656e746572696e672064697374726962757465566f746573a2646970667358221220afac8aeb6331c564d23a0042eaeda6e01714ce5c181fbe39329b8d0a8c41203264736f6c63430008090033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061012c5760003560e01c806380e80021116100ad578063b647990a11610071578063b647990a14610322578063d25214291461032c578063d305bcb614610336578063dfbf53ae14610340578063f7610be01461035e5761012c565b806380e80021146102a25780638b98e7b1146102ac5780638e7ea5b2146102b65780639bcc3361146102d4578063ad25e829146102f25761012c565b80634585e33b116100f45780634585e33b146101e95780634bdd7585146102055780636e04ff0d146102355780637061bfcf146102665780637a84d13e146102845761012c565b80630aa0567714610131578063193add061461014f5780631e4800341461017f5780632b929d641461019d578063321a0489146101b9575b600080fd5b61013961037a565b604051610146919061513c565b60405180910390f35b61016960048036038101906101649190615197565b6103a0565b60405161017691906151df565b60405180910390f35b6101876103fc565b6040516101949190615213565b60405180910390f35b6101b760048036038101906101b29190615374565b610406565b005b6101d360048036038101906101ce9190615197565b610861565b6040516101e091906151df565b60405180910390f35b61020360048036038101906101fe919061541d565b6108bd565b005b61021f600480360381019061021a9190615197565b610985565b60405161022c91906155cf565b60405180910390f35b61024f600480360381019061024a9190615692565b610ba4565b60405161025d929190615763565b60405180910390f35b61026e610c04565b60405161027b9190615213565b60405180910390f35b61028c610c10565b6040516102999190615213565b60405180910390f35b6102aa610c21565b005b6102b4610dc0565b005b6102be611153565b6040516102cb919061513c565b60405180910390f35b6102dc6111ca565b6040516102e99190615213565b60405180910390f35b61030c60048036038101906103079190615197565b6111d6565b604051610319919061589f565b60405180910390f35b61032a611481565b005b6103346117ec565b005b61033e611c43565b005b610348611de2565b604051610355919061513c565b60405180910390f35b610378600480360381019061037391906158c1565b611e08565b005b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600080600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000154116103f25760006103f5565b60015b9050919050565b6000600a54905090565b6001600960009054906101000a900461ffff1661ffff168161ffff161461047657600960009054906101000a900461ffff16816040517f9b068a9900000000000000000000000000000000000000000000000000000000815260040161046d929190615931565b60405180910390fd5b61047f336103a0565b156104c157336040517fa4a2360c0000000000000000000000000000000000000000000000000000000081526004016104b8919061513c565b60405180910390fd5b6104cb600461277c565b6104d5600561277c565b6104df600e61277c565b60006104eb6004612792565b9050606060006040518061010001604052808481526020018681526020013373ffffffffffffffffffffffffffffffffffffffff168152602001838152602001600081526020016000151581526020016000151581526020016000815250905080600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000820151816000015560208201518160010190805190602001906105b1929190614ddd565b5060408201518160020160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506060820151816003019080519060200190610615929190614e63565b506080820151816004015560a08201518160050160006101000a81548160ff02191690831515021790555060c08201518160050160016101000a81548160ff02191690831515021790555060e082015181600601559050506000339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506107466040518060400160405280601381526020017f456e74657265642063616e6469646174653a2000000000000000000000000000815250866040518060400160405280601081526020017f2066726f6d2061646472657373203a2000000000000000000000000000000000815250336127a0565b806040015173ffffffffffffffffffffffffffffffffffffffff1681602001516040516107739190615996565b604051809103902082600001517f548af351e0d3cac7bd58378a494326c2989919dca076c78773a389b714bfcbd160405160405180910390a46000600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600001541161085a576107fe610dc0565b6001600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060030160026101000a81548160ff0219169083151502179055505b5050505050565b600080600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000154116108b35760006108b6565b60015b9050919050565b60006108d760405180602001604052806000815250610ba4565b509050801561094e576001600960009054906101000a900461ffff1661ffff16141561091157610905610c21565b42600a81905550610949565b6002600960009054906101000a900461ffff1661ffff16141561094857610936611c43565b61093e611481565b610946611153565b505b5b610980565b6040517f70e428b000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b505050565b61098d614eed565b6000600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000015411610a1457816040517f29869395000000000000000000000000000000000000000000000000000000008152600401610a0b919061513c565b60405180910390fd5b600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206040518060c0016040529081600082015481526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200160028201805480602002602001604051908101604052809291908181526020018280548015610b4357602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311610af9575b505050505081526020016003820160009054906101000a900460ff161515151581526020016003820160019054906101000a900460ff161515151581526020016003820160029054906101000a900460ff1615151515815250509050919050565b600060606000610e10600a5442610bbb91906159dc565b119050808015610bfc575060001515600360149054906101000a900460ff1615151480610bfb575060001515600360159054906101000a900460ff161515145b5b925050915091565b60088060000154905081565b6000610c1c6005612792565b905090565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610cb357336040517fec880c13000000000000000000000000000000000000000000000000000000008152600401610caa919061513c565b60405180910390fd5b6001600960009054906101000a900461ffff1661ffff168161ffff1614610d2357600960009054906101000a900461ffff16816040517f9b068a99000000000000000000000000000000000000000000000000000000008152600401610d1a929190615931565b60405180910390fd5b610d616040518060400160405280600c81526020017f5068617365203120456e64730000000000000000000000000000000000000000815250612842565b6002600960006101000a81548161ffff021916908361ffff160217905550610dbd6040518060400160405280600d81526020017f426567696e205068617365203200000000000000000000000000000000000000815250612842565b50565b6001600960009054906101000a900461ffff1661ffff168161ffff1614610e3057600960009054906101000a900461ffff16816040517f9b068a99000000000000000000000000000000000000000000000000000000008152600401610e27929190615931565b60405180910390fd5b610e3933610861565b8015610e98575060001515600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060030160029054906101000a900460ff161515145b15610eda57336040517fa7ebb3c2000000000000000000000000000000000000000000000000000000008152600401610ed1919061513c565b60405180910390fd5b610ee333610861565b8015610f42575060011515600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060030160029054906101000a900460ff161515145b15610f8457336040517fa7ebb3c2000000000000000000000000000000000000000000000000000000008152600401610f7b919061513c565b60405180910390fd5b610f8e600661277c565b610f98600761277c565b6000610fa46006612792565b9050606060006040518060c001604052808481526020013373ffffffffffffffffffffffffffffffffffffffff16815260200183815260200160001515815260200160011515815260200160001515815250905080600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000820151816000015560208201518160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060408201518160020190805190602001906110a5929190614e63565b5060608201518160030160006101000a81548160ff02191690831515021790555060808201518160030160016101000a81548160ff02191690831515021790555060a08201518160030160026101000a81548160ff0219169083151502179055509050503373ffffffffffffffffffffffffffffffffffffffff16837ff45b8429c36d478f9a6d081c4811a819b98aa5b608588bed9d406405cf28247360405160405180910390a350505050565b6000801515600360149054906101000a900460ff16151514156111a2576040517f944558c800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60078060000154905081565b6111de614f3f565b6000600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600001541161126557816040517f098e625800000000000000000000000000000000000000000000000000000000815260040161125c919061513c565b60405180910390fd5b600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060405180610100016040529081600082015481526020016001820180546112ca90615a3f565b80601f01602080910402602001604051908101604052809291908181526020018280546112f690615a3f565b80156113435780601f1061131857610100808354040283529160200191611343565b820191906000526020600020905b81548152906001019060200180831161132657829003601f168201915b505050505081526020016002820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016003820180548060200260200160405190810160405280929190818152602001828054801561142757602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190600101908083116113dd575b50505050508152602001600482015481526020016005820160009054906101000a900460ff161515151581526020016005820160019054906101000a900460ff161515151581526020016006820154815250509050919050565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461151357336040517fec880c1300000000000000000000000000000000000000000000000000000000815260040161150a919061513c565b60405180910390fd5b6003600960009054906101000a900461ffff1661ffff168161ffff161461158357600960009054906101000a900461ffff16816040517f9b068a9900000000000000000000000000000000000000000000000000000000815260040161157a929190615931565b60405180910390fd5b600061158f6008612792565b9050600060016002836115a29190615aa0565b6115ac9190615ad1565b90505b60001515600360149054906101000a900460ff1615151480156115e5575060001515600360159054906101000a900460ff161515145b156117e7576115f3816128db565b6116246040518060600160405280602e8152602001616378602e9139600360149054906101000a900460ff16613c91565b6116686040518060400160405280601f81526020017f46697273742063686f69636520766f746573206172726179206c656e67746800815250600d80549050613d2d565b6116936040518060600160405280602281526020016163226022913961168e600e612792565b613d2d565b60001515600360149054906101000a900460ff1615151480156116c9575060001515600360159054906101000a900460ff161515145b156117445761170c6040518060400160405280601281526020017f446973747269627574696e6720766f7465730000000000000000000000000000815250612842565b611714613dc9565b61173f6040518060600160405280602d8152602001616225602d913961173a600e612792565b613d2d565b6117e2565b60001515600360149054906101000a900460ff16151514801561177a575060011515600360159054906101000a900460ff161515145b156117e1576117a06040518060600160405280602c815260200161604e602c9139612842565b7f208e1b5c9ff492c984901690e40e7b1f9f15ec4959979edc1e6cc8de8716e2686117cb600c612792565b6040516117d89190615213565b60405180910390a15b5b6115af565b505050565b6001600960009054906101000a900461ffff1661ffff168161ffff161461185c57600960009054906101000a900461ffff16816040517f9b068a99000000000000000000000000000000000000000000000000000000008152600401611853929190615931565b60405180910390fd5b6000600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000154116118e357336040517f098e62580000000000000000000000000000000000000000000000000000000081526004016118da919061513c565b60405180910390fd5b6000600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020604051806101000160405290816000820154815260200160018201805461194a90615a3f565b80601f016020809104026020016040519081016040528092919081815260200182805461197690615a3f565b80156119c35780601f10611998576101008083540402835291602001916119c3565b820191906000526020600020905b8154815290600101906020018083116119a657829003601f168201915b505050505081526020016002820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200160038201805480602002602001604051908101604052809291908181526020018280548015611aa757602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311611a5d575b50505050508152602001600482015481526020016005820160009054906101000a900460ff161515151581526020016005820160019054906101000a900460ff161515151581526020016006820154815250509050600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600080820160009055600182016000611b549190614f9e565b6002820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff0219169055600382016000611b8b9190614fde565b60048201600090556005820160006101000a81549060ff02191690556005820160016101000a81549060ff021916905560068201600090555050611bcf6005614ad9565b611bd9600e614ad9565b806040015173ffffffffffffffffffffffffffffffffffffffff168160200151604051611c069190615996565b604051809103902082600001517fca4cd4e7e4bac7a6adbcfcb5bcb9f3b106e667bbe038fbee3c5635c5fbd80ed260405160405180910390a45050565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614611cd557336040517fec880c13000000000000000000000000000000000000000000000000000000008152600401611ccc919061513c565b60405180910390fd5b6002600960009054906101000a900461ffff1661ffff168161ffff1614611d4557600960009054906101000a900461ffff16816040517f9b068a99000000000000000000000000000000000000000000000000000000008152600401611d3c929190615931565b60405180910390fd5b611d836040518060400160405280600c81526020017f5068617365203220456e64730000000000000000000000000000000000000000815250612842565b6003600960006101000a81548161ffff021916908361ffff160217905550611ddf6040518060400160405280600e81526020017f5068617365203320426567696e73000000000000000000000000000000000000815250612842565b50565b600b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60001515611e1533610861565b15151415611e5a57336040517f29869395000000000000000000000000000000000000000000000000000000008152600401611e51919061513c565b60405180910390fd5b82828260001515611e6a846103a0565b15151415611eaf57826040517f098e6258000000000000000000000000000000000000000000000000000000008152600401611ea6919061513c565b60405180910390fd5b60001515611ebc836103a0565b15151415611f0157816040517f098e6258000000000000000000000000000000000000000000000000000000008152600401611ef8919061513c565b60405180910390fd5b60001515611f0e826103a0565b15151415611f5357806040517f098e6258000000000000000000000000000000000000000000000000000000008152600401611f4a919061513c565b60405180910390fd5b8585858173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161480611fbb57508073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16145b80611ff157508073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16145b1561203357336040517fe767036100000000000000000000000000000000000000000000000000000000815260040161202a919061513c565b60405180910390fd5b6002600960009054906101000a900461ffff1661ffff168161ffff16146120a357600960009054906101000a900461ffff16816040517f9b068a9900000000000000000000000000000000000000000000000000000000815260040161209a929190615931565b60405180910390fd5b6000600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000209050600015158160030160019054906101000a900460ff161515141561214157336040517f4bb12981000000000000000000000000000000000000000000000000000000008152600401612138919061513c565b60405180910390fd5b600115158160030160009054906101000a900460ff161515141561219c57336040517f5c920d70000000000000000000000000000000000000000000000000000000008152600401612193919061513c565b60405180910390fd5b6000600160008d73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020905080600301339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508060030180549050816004018190555080600160008e73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000820154816000015560018201816001019080546122b290615a3f565b6122bd929190614fff565b506002820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168160020160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600382018160030190805461233b92919061508c565b50600482015481600401556005820160009054906101000a900460ff168160050160006101000a81548160ff0219169083151502179055506005820160019054906101000a900460ff168160050160016101000a81548160ff02191690831515021790555060068201548160060155905050816002018a9080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550816002018b9080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550816002018c9080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060018260030160006101000a81548160ff02191690831515021790555081600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082015481600001556001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060028201816002019080546125c092919061508c565b506003820160009054906101000a900460ff168160030160006101000a81548160ff0219169083151502179055506003820160019054906101000a900460ff168160030160016101000a81548160ff0219169083151502179055506003820160029054906101000a900460ff168160030160026101000a81548160ff021916908315150217905550905050612655600861277c565b6126ee6040518060400160405280600781526020017f566f7465723a20000000000000000000000000000000000000000000000000008152508360010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166040518060400160405280600b81526020017f206a75737420766f746564000000000000000000000000000000000000000000815250614b35565b8160010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1682600001547f1df7a981f2b7c2d90635bc06e912ebd86795304133dc9ed98317c89e8fdce36f846002018f8f8f6040516127669493929190615c24565b60405180910390a3505050505050505050505050565b6001816000016000828254019250508190555050565b600081600001549050919050565b61283c848484846040516024016127ba9493929190615cba565b6040516020818303038152906040527f6d572f44000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050614bd4565b50505050565b6128d8816040516024016128569190615d14565b6040516020818303038152906040527f41304fac000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050614bd4565b50565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461296d57336040517fec880c13000000000000000000000000000000000000000000000000000000008152600401612964919061513c565b60405180910390fd5b6003600960009054906101000a900461ffff1661ffff168161ffff16146129dd57600960009054906101000a900461ffff16816040517f9b068a990000000000000000000000000000000000000000000000000000000081526004016129d4929190615931565b60405180910390fd5b6129e7600c61277c565b612a086040518060600160405280602481526020016162fe60249139612842565b612a506040518060400160405280600781526020017f524f554e443a2000000000000000000000000000000000000000000000000000815250612a4b600c612792565b613d2d565b600080839050612a956040518060400160405280600b81526020017f48696768657374566f746500000000000000000000000000000000000000000081525083613d2d565b612ad46040518060400160405280600a81526020017f4c6f77657374566f74650000000000000000000000000000000000000000000081525082613d2d565b612b1c6040518060400160405280601481526020017f4e756d626572206f662063616e64696461746573000000000000000000000000815250612b17600e612792565b613d2d565b60005b612b296005612792565b81101561321d576000808281548110612b4557612b44615d36565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060011515612b7f826103a0565b15151415613209576000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206040518061010001604052908160008201548152602001600182018054612bee90615a3f565b80601f0160208091040260200160405190810160405280929190818152602001828054612c1a90615a3f565b8015612c675780601f10612c3c57610100808354040283529160200191612c67565b820191906000526020600020905b815481529060010190602001808311612c4a57829003601f168201915b505050505081526020016002820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200160038201805480602002602001604051908101604052809291908181526020018280548015612d4b57602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311612d01575b50505050508152602001600482015481526020016005820160009054906101000a900460ff161515151581526020016005820160019054906101000a900460ff161515151581526020016006820154815250509050612e166040518060400160405280601f81526020017f2d2d2d2d2d20436865636b696e672063616e6469646174653a202d2d2d2d2d00815250836040518060400160405280600a81526020017f20617420696e646578200000000000000000000000000000000000000000000081525086614bfd565b612e596040518060400160405280601181526020017f4e756d626572206f6620766f7465733a200000000000000000000000000000008152508260800151613d2d565b600081608001511415612fda57612ea56040518060400160405280601b81526020017f44656c6574696e67203020766f74652063616e6469646174653a20000000000081525083614c9f565b600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600080820160009055600182016000612efd9190614f9e565b6002820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff0219169055600382016000612f349190614fde565b60048201600090556005820160006101000a81549060ff02191690556005820160016101000a81549060ff0219169055600682016000905550508173ffffffffffffffffffffffffffffffffffffffff167f20ac7292cd739ac1856c1820528eab26326d67d059c8c2655e5b0f74e50166cb8260800151612fb5600c612792565b604051612fc3929190615d65565b60405180910390a2612fd5600e614ad9565b61312a565b8681608001511061312957806080015194508060400151600b60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506001600360146101000a81548160ff0219169083151502179055506130ad6040518060400160405280601f81526020017f5265616368656420746872657368686f6c6420666f756e642077696e6e657200815250600b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16614c9f565b600b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167fdd9fa82e49a52e31beac4bcbf7929f7baed9b1d0b8f111f05a389aacf0cabb1c86613112600c612792565b604051613120929190615d65565b60405180910390a25b5b60011515613137836103a0565b151514156131e5578381608001511161319157806080015193506131906040518060400160405280601b81526020017f6c6f77657374566f746520616674657220636f6d70617269736f6e000000000081525085613d2d565b5b84816080015111156131e457806080015194506131e36040518060400160405280601c81526020017f68696768657374566f746520616674657220636f6d70617269736f6e0000000081525085613d2d565b5b5b6132076040518060600160405280602e81526020016162a5602e913984613d2d565b505b50808061321590615d8e565b915050612b1f565b5080821415613242576001600360156101000a81548160ff0219169083151502179055505b60001515600360149054906101000a900460ff161515148015613278575060001515600360159054906101000a900460ff161515145b15613c8b5761329e60405180606001604052806031815260200161614b60319139612842565b6132dd6040518060400160405280600c81526020017f4869676865737420766f7465000000000000000000000000000000000000000081525083613d2d565b61331c6040518060400160405280600b81526020017f4c6f7765737420766f746500000000000000000000000000000000000000000081525082613d2d565b60005b6133296005612792565b8110156138f357600080828154811061334557613344615d36565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690506001151561337f826103a0565b151514156138df576000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060405180610100016040529081600082015481526020016001820180546133ee90615a3f565b80601f016020809104026020016040519081016040528092919081815260200182805461341a90615a3f565b80156134675780601f1061343c57610100808354040283529160200191613467565b820191906000526020600020905b81548152906001019060200180831161344a57829003601f168201915b505050505081526020016002820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016003820180548060200260200160405190810160405280929190818152602001828054801561354b57602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311613501575b50505050508152602001600482015481526020016005820160009054906101000a900460ff161515151581526020016005820160019054906101000a900460ff161515151581526020016006820154815250509050838160800151141561388b5760018160a0019015159081151581525050806040015173ffffffffffffffffffffffffffffffffffffffff167f822ba652eecc23b3a93ed416af9821c1cfb7837abe0f4ab4fe98f71f43a3eaf98260800151613608600c612792565b604051613616929190615d65565b60405180910390a261364460405180606001604052806032815260200161617c603291398260400151614c9f565b6136876040518060400160405280601481526020017f2e2e2e7769746820766f746520636f756e743a200000000000000000000000008152508260800151613d2d565b6000816080015111156137b7576136b56040518060600160405280602b81526020016162d3602b9139612842565b60005b81608001518110156137b557600d826060015182815181106136dd576136dc615d36565b5b60200260200101519080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506137a26040518060400160405280600381526020017f2e2e2e00000000000000000000000000000000000000000000000000000000008152508360600151838151811061379557613794615d36565b5b6020026020010151614c9f565b80806137ad90615d8e565b9150506136b8565b505b600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008082016000905560018201600061380f9190614f9e565b6002820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690556003820160006138469190614fde565b60048201600090556005820160006101000a81549060ff02191690556005820160016101000a81549060ff02191690556006820160009055505061388a600e614ad9565b5b84816080015114156138dd578060400151600b60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b505b5080806138eb90615d8e565b91505061331f565b506001613900600e612792565b1415613c6957600060016000600b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020604051806101000160405290816000820154815260200160018201805461398f90615a3f565b80601f01602080910402602001604051908101604052809291908181526020018280546139bb90615a3f565b8015613a085780601f106139dd57610100808354040283529160200191613a08565b820191906000526020600020905b8154815290600101906020018083116139eb57829003601f168201915b505050505081526020016002820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200160038201805480602002602001604051908101604052809291908181526020018280548015613aec57602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311613aa2575b50505050508152602001600482015481526020016005820160009054906101000a900460ff161515151581526020016005820160019054906101000a900460ff161515151581526020016006820154815250509050806080015192508060400151600b60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506001600360146101000a81548160ff021916908315150217905550613bec6040518060600160405280602581526020016161ae60259139600b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16614c9f565b600b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f2c7e052d6f1bd2194b1213d6c3179d42b6009f8d45dc4efd6fff510f2593c4ae84613c51600c612792565b604051613c5f929190615d65565b60405180910390a2505b613c8a6040518060600160405280603281526020016160c160329139612842565b5b50505050565b613d298282604051602401613ca7929190615dd7565b6040516020818303038152906040527fc3b55635000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050614bd4565b5050565b613dc58282604051602401613d43929190615e07565b6040516020818303038152906040527fb60e72cc000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050614bd4565b5050565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614613e5b57336040517fec880c13000000000000000000000000000000000000000000000000000000008152600401613e52919061513c565b60405180910390fd5b6003600960009054906101000a900461ffff1661ffff168161ffff1614613ecb57600960009054906101000a900461ffff16816040517f9b068a99000000000000000000000000000000000000000000000000000000008152600401613ec2929190615931565b60405180910390fd5b613ef260405180606001604052806034815260200161634460349139600d80549050613d2d565b60005b600d80549050811015614a3257600060026000600d8481548110613f1c57613f1b615d36565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002090506140006040518060400160405280601981526020017f2d2d2d204469737472696275746520766f7465723a202d2d2d00000000000000815250600d8481548110613fd057613fcf615d36565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16614c9f565b6000816002018054905011156149fd576000816002016001836002018054905061402a91906159dc565b8154811061403b5761403a615d36565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508160020180548061407c5761407b615e37565b5b6001900381819060005260206000200160006101000a81549073ffffffffffffffffffffffffffffffffffffffff021916905590556000826002018054905011156149fb576000600183600201805490506140d791906159dc565b9050600015156141268460020183815481106140f6576140f5615d36565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166103a0565b151514156143df578260020180548061414257614141615e37565b5b6001900381819060005260206000200160006101000a81549073ffffffffffffffffffffffffffffffffffffffff0219169055905560008360020180549050111561431c576001836002018054905061419b91906159dc565b905061425a6040518060800160405280605281526020016161d3605291398460020183815481106141cf576141ce615d36565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166040518060400160405280600f81526020017f2c2066726f6d20766f746572203a2000000000000000000000000000000000008152508660010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16614d3b565b8260010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f103341034b4110e9c0de42a7bf6ed01694246e04f94eeeba46a37720b7d4f3e28460020183815481106142cc576142cb615d36565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16614301600c612792565b60405161430f929190615e66565b60405180910390a26143de565b614362604051806060016040528060378152602001616114603791398460010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16614c9f565b8260010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f2581b630586fe0a7a8a85fb2474d79828acfaca8938a93ae82994a08502db77a6143c8600c612792565b6040516143d59190615213565b60405180910390a25b5b6144288360020182815481106143f8576143f7615d36565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166103a0565b8015614435575060008110155b156149375760006001600085600201848154811061445657614455615d36565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000209050806003018460010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550806003018054905081600401819055506145b860405180606001604052806024815260200161607a6024913985600201848154811061458857614587615d36565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16614c9f565b8360010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f075046d5bd061445e5e003ef23b4f462b7dd602982758cabf8c1ee162333bb678486600201858154811061462b5761462a615d36565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16614660600c612792565b60405161466f93929190615e8f565b60405180910390a26146da6040518060400160405280600d81526020017f566f7465722041646472657373000000000000000000000000000000000000008152508560010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16614c9f565b6147196040518060400160405280600481526020017f46726f6d0000000000000000000000000000000000000000000000000000000081525084614c9f565b6147986040518060400160405280600281526020017f746f00000000000000000000000000000000000000000000000000000000000081525085600201848154811061476857614767615d36565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16614c9f565b80600160008660020185815481106147b3576147b2615d36565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008201548160000155600182018160010190805461483690615a3f565b614841929190614fff565b506002820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168160020160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060038201816003019080546148bf92919061508c565b50600482015481600401556005820160009054906101000a900460ff168160050160006101000a81548160ff0219169083151502179055506005820160019054906101000a900460ff168160050160016101000a81548160ff02191690831515021790555060068201548160060155905050506149f9565b61497d6040518060600160405280602b815260200161627a602b91398460010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16614c9f565b8260010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f2581b630586fe0a7a8a85fb2474d79828acfaca8938a93ae82994a08502db77a6149e3600c612792565b6040516149f09190615213565b60405180910390a25b505b505b614a1e60405180606001604052806028815260200161625260289139612842565b508080614a2a90615d8e565b915050613ef5565b505b6000600d805490501115614a8e57600d805480614a5457614a53615e37565b5b6001900381819060005260206000200160006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690559055614a34565b614ab56040518060600160405280602181526020016160f360219139600d80549050613d2d565b614ad660405180606001604052806023815260200161609e60239139612842565b50565b60008160000154905060008111614b25576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401614b1c90615f12565b60405180910390fd5b6001810382600001819055505050565b614bcf838383604051602401614b4d93929190615f32565b6040516020818303038152906040527fe0e9ad4f000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050614bd4565b505050565b60008151905060006a636f6e736f6c652e6c6f679050602083016000808483855afa5050505050565b614c9984848484604051602401614c179493929190615f77565b6040516020818303038152906040527f91d1112e000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050614bd4565b50505050565b614d378282604051602401614cb5929190615fca565b6040516020818303038152906040527f319af333000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050614bd4565b5050565b614dd784848484604051602401614d559493929190615ffa565b6040516020818303038152906040527faabc9a31000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050614bd4565b50505050565b828054614de990615a3f565b90600052602060002090601f016020900481019282614e0b5760008555614e52565b82601f10614e2457805160ff1916838001178555614e52565b82800160010185558215614e52579182015b82811115614e51578251825591602001919060010190614e36565b5b509050614e5f91906150de565b5090565b828054828255906000526020600020908101928215614edc579160200282015b82811115614edb5782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190614e83565b5b509050614ee991906150de565b5090565b6040518060c0016040528060008152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001606081526020016000151581526020016000151581526020016000151581525090565b6040518061010001604052806000815260200160608152602001600073ffffffffffffffffffffffffffffffffffffffff1681526020016060815260200160008152602001600015158152602001600015158152602001600081525090565b508054614faa90615a3f565b6000825580601f10614fbc5750614fdb565b601f016020900490600052602060002090810190614fda91906150de565b5b50565b5080546000825590600052602060002090810190614ffc91906150de565b50565b82805461500b90615a3f565b90600052602060002090601f01602090048101928261502d576000855561507b565b82601f1061503e578054855561507b565b8280016001018555821561507b57600052602060002091601f016020900482015b8281111561507a57825482559160010191906001019061505f565b5b50905061508891906150de565b5090565b8280548282559060005260206000209081019282156150cd5760005260206000209182015b828111156150cc5782548255916001019190600101906150b1565b5b5090506150da91906150de565b5090565b5b808211156150f75760008160009055506001016150df565b5090565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000615126826150fb565b9050919050565b6151368161511b565b82525050565b6000602082019050615151600083018461512d565b92915050565b6000604051905090565b600080fd5b600080fd5b6151748161511b565b811461517f57600080fd5b50565b6000813590506151918161516b565b92915050565b6000602082840312156151ad576151ac615161565b5b60006151bb84828501615182565b91505092915050565b60008115159050919050565b6151d9816151c4565b82525050565b60006020820190506151f460008301846151d0565b92915050565b6000819050919050565b61520d816151fa565b82525050565b60006020820190506152286000830184615204565b92915050565b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b61528182615238565b810181811067ffffffffffffffff821117156152a05761529f615249565b5b80604052505050565b60006152b3615157565b90506152bf8282615278565b919050565b600067ffffffffffffffff8211156152df576152de615249565b5b6152e882615238565b9050602081019050919050565b82818337600083830152505050565b6000615317615312846152c4565b6152a9565b90508281526020810184848401111561533357615332615233565b5b61533e8482856152f5565b509392505050565b600082601f83011261535b5761535a61522e565b5b813561536b848260208601615304565b91505092915050565b60006020828403121561538a57615389615161565b5b600082013567ffffffffffffffff8111156153a8576153a7615166565b5b6153b484828501615346565b91505092915050565b600080fd5b600080fd5b60008083601f8401126153dd576153dc61522e565b5b8235905067ffffffffffffffff8111156153fa576153f96153bd565b5b602083019150836001820283011115615416576154156153c2565b5b9250929050565b6000806020838503121561543457615433615161565b5b600083013567ffffffffffffffff81111561545257615451615166565b5b61545e858286016153c7565b92509250509250929050565b615473816151fa565b82525050565b6154828161511b565b82525050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b60006154c08383615479565b60208301905092915050565b6000602082019050919050565b60006154e482615488565b6154ee8185615493565b93506154f9836154a4565b8060005b8381101561552a57815161551188826154b4565b975061551c836154cc565b9250506001810190506154fd565b5085935050505092915050565b615540816151c4565b82525050565b600060c08301600083015161555e600086018261546a565b5060208301516155716020860182615479565b506040830151848203604086015261558982826154d9565b915050606083015161559e6060860182615537565b5060808301516155b16080860182615537565b5060a08301516155c460a0860182615537565b508091505092915050565b600060208201905081810360008301526155e98184615546565b905092915050565b600067ffffffffffffffff82111561560c5761560b615249565b5b61561582615238565b9050602081019050919050565b6000615635615630846155f1565b6152a9565b90508281526020810184848401111561565157615650615233565b5b61565c8482856152f5565b509392505050565b600082601f8301126156795761567861522e565b5b8135615689848260208601615622565b91505092915050565b6000602082840312156156a8576156a7615161565b5b600082013567ffffffffffffffff8111156156c6576156c5615166565b5b6156d284828501615664565b91505092915050565b600081519050919050565b600082825260208201905092915050565b60005b838110156157155780820151818401526020810190506156fa565b83811115615724576000848401525b50505050565b6000615735826156db565b61573f81856156e6565b935061574f8185602086016156f7565b61575881615238565b840191505092915050565b600060408201905061577860008301856151d0565b818103602083015261578a818461572a565b90509392505050565b600081519050919050565b600082825260208201905092915050565b60006157ba82615793565b6157c4818561579e565b93506157d48185602086016156f7565b6157dd81615238565b840191505092915050565b600061010083016000830151615801600086018261546a565b506020830151848203602086015261581982826157af565b915050604083015161582e6040860182615479565b506060830151848203606086015261584682826154d9565b915050608083015161585b608086018261546a565b5060a083015161586e60a0860182615537565b5060c083015161588160c0860182615537565b5060e083015161589460e086018261546a565b508091505092915050565b600060208201905081810360008301526158b981846157e8565b905092915050565b6000806000606084860312156158da576158d9615161565b5b60006158e886828701615182565b93505060206158f986828701615182565b925050604061590a86828701615182565b9150509250925092565b600061ffff82169050919050565b61592b81615914565b82525050565b60006040820190506159466000830185615922565b6159536020830184615922565b9392505050565b600081905092915050565b600061597082615793565b61597a818561595a565b935061598a8185602086016156f7565b80840191505092915050565b60006159a28284615965565b915081905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006159e7826151fa565b91506159f2836151fa565b925082821015615a0557615a046159ad565b5b828203905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680615a5757607f821691505b60208210811415615a6b57615a6a615a10565b5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000615aab826151fa565b9150615ab6836151fa565b925082615ac657615ac5615a71565b5b828204905092915050565b6000615adc826151fa565b9150615ae7836151fa565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115615b1c57615b1b6159ad565b5b828201905092915050565b600081549050919050565b600082825260208201905092915050565b60008190508160005260206000209050919050565b60008160001c9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000615b98615b9383615b58565b615b65565b9050919050565b6000615bab8254615b85565b9050919050565b6000600182019050919050565b6000615bca82615b27565b615bd48185615b32565b9350615bdf83615b43565b8060005b83811015615c1757615bf482615b9f565b615bfe88826154b4565b9750615c0983615bb2565b925050600181019050615be3565b5085935050505092915050565b60006080820190508181036000830152615c3e8187615bbf565b9050615c4d602083018661512d565b615c5a604083018561512d565b615c67606083018461512d565b95945050505050565b600082825260208201905092915050565b6000615c8c82615793565b615c968185615c70565b9350615ca68185602086016156f7565b615caf81615238565b840191505092915050565b60006080820190508181036000830152615cd48187615c81565b90508181036020830152615ce88186615c81565b90508181036040830152615cfc8185615c81565b9050615d0b606083018461512d565b95945050505050565b60006020820190508181036000830152615d2e8184615c81565b905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6000604082019050615d7a6000830185615204565b615d876020830184615204565b9392505050565b6000615d99826151fa565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415615dcc57615dcb6159ad565b5b600182019050919050565b60006040820190508181036000830152615df18185615c81565b9050615e0060208301846151d0565b9392505050565b60006040820190508181036000830152615e218185615c81565b9050615e306020830184615204565b9392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fd5b6000604082019050615e7b600083018561512d565b615e886020830184615204565b9392505050565b6000606082019050615ea4600083018661512d565b615eb1602083018561512d565b615ebe6040830184615204565b949350505050565b7f436f756e7465723a2064656372656d656e74206f766572666c6f770000000000600082015250565b6000615efc601b83615c70565b9150615f0782615ec6565b602082019050919050565b60006020820190508181036000830152615f2b81615eef565b9050919050565b60006060820190508181036000830152615f4c8186615c81565b9050615f5b602083018561512d565b8181036040830152615f6d8184615c81565b9050949350505050565b60006080820190508181036000830152615f918187615c81565b9050615fa0602083018661512d565b8181036040830152615fb28185615c81565b9050615fc16060830184615204565b95945050505050565b60006040820190508181036000830152615fe48185615c81565b9050615ff3602083018461512d565b9392505050565b600060808201905081810360008301526160148187615c81565b9050616023602083018661512d565b81810360408301526160358185615c81565b9050616044606083018461512d565b9594505050505056fe416c6c2063616e6469646174657320617265207469656420616674657220636f756e74696e6720766f74657343616e64696461746520726563656976656420766f74652066726f6d20766f7465723a202d2d2d2046696e697368656420446973747269627574696e6720566f746573202d2d2d2d2d2d46696e697368656420656c696d696e6174696e67206c6f7765737420766f74652063616e64696461746573202d2d2d666972737443686f696365566f746572734164647265737365732e6c656e677468416c6c206f662074686520766f74657227732063616e6469646174652061726520656c696d696e6174656420666f7220766f7465723a202d2d2d20537461727420656c696d696e6174696e67206c6f7765737420766f74652063616e64696461746573202d2d2d2d43616e64696461746520726563656976656420746865206c6f7765737420766f74657320616e6420656c696d696e617465644f6e6c79206f6e652063616e646964617465206c6566742c20666f756e642077696e6e65724e6578742063616e64696461746520697320656c696d696e6174656420736f206469737472696275746520746865206e6578742063686f6963652063616e646964617465202833726420766f74657229203a4e756d626572206f662063616e6469646174657320616674657220646973747269627574696e6720766f7465732d2d2d20446f6e6520646973747269627574696e6720666f72207468697320766f746572202d2d2d416c6c206f662074686520766f74657227732063616e6469646174652061726520656c696d696e617465642d2d2d2046696e697368656420636f756e74696e6720766f74657320666f722063616e646964617465202d2d2d2d546865736520766f746572732077696c6c20676f20746f207468656972206e6578742063686f6963653a202d2d2d2d2d20434f554e542046495253542043484f49434520564f544553202d2d2d2d2d4e756d626572206f66206163746976652063616e64696461746573206c6566743a202d2d2d204469737472696275746520766f7465732066726f6d206c6f7765737420766f74652063616e64696461746573202d2d2d697357696e6e65725069636b6564206265666f726520656e746572696e672064697374726962757465566f746573a2646970667358221220afac8aeb6331c564d23a0042eaeda6e01714ce5c181fbe39329b8d0a8c41203264736f6c63430008090033",
  "devdoc": {
    "author": "Kent Miguel",
    "details": "uses chainlink automation to end and start register, voting, and count phases",
    "kind": "dev",
    "methods": {
      "beginPhaseTwo()": {
        "details": "look for checkschange to private after testing...??"
      },
      "countVotes()": {
        "details": "can only be called after phase3 begins and only by the deployer"
      },
      "enterCandidate(string)": {
        "details": "Candidate will be registered to vote automatically and will be disabled when register phase is over",
        "params": {
          "_candidateName": "The name of the candidate"
        }
      },
      "registerToVote()": {
        "details": "1. users who enter as a candidate will be registered automatically, will be disabled at the end of phase 1 2. Optimize this by accessing struct once and store it in a local variable and use that for the checks.. see coverage first and gas viewer"
      },
      "vote(address,address,address)": {
        "details": "come back to implement checks: 1. phase switches 2. Undervote is not allowed meaning all voters must choose three candidates in order to cast vote"
      },
      "withdrawCandidate()": {
        "details": "checks:      1 . disabled when register phase is over      2. check that person who registered are only the one who can withdraw      3. check that cannot withdraw if entry does not exist"
      }
    },
    "title": "A Ranked Choice Voting Smart Contract",
    "version": 1
  },
  "userdoc": {
    "errors": {
      "ActionIsNotAllowedAtThisStage(uint16,uint16)": [
        {
          "notice": "Errors ///"
        }
      ]
    },
    "kind": "user",
    "methods": {
      "beginPhaseThree()": {
        "notice": "Phase 3: Count Votes"
      },
      "beginPhaseTwo()": {
        "notice": "this function turns on the phase 2 (voting) switch which disables phase 1 functionalities"
      },
      "countVotes()": {
        "notice": "this function calculates the votes to get the winner"
      },
      "electionAdmin()": {
        "notice": "Election global variables ///"
      },
      "enterCandidate(string)": {
        "notice": "this functions registers candidates"
      },
      "getCandidateByAddress(address)": {
        "notice": "Getter functions ///"
      },
      "registerToVote()": {
        "notice": "this function registers voters to vote for phase 2: Voting"
      },
      "vote(address,address,address)": {
        "notice": "this function allows voters to vote their choices in the election"
      },
      "winner()": {
        "notice": "phase 3 variables"
      },
      "withdrawCandidate()": {
        "notice": "withdraws from election"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 944,
        "contract": "contracts/RankedChoiceContract.sol:RankedChoiceContract",
        "label": "candidateAddresses",
        "offset": 0,
        "slot": "0",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 949,
        "contract": "contracts/RankedChoiceContract.sol:RankedChoiceContract",
        "label": "addressToCandidate",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_struct(Candidate)927_storage)"
      },
      {
        "astId": 954,
        "contract": "contracts/RankedChoiceContract.sol:RankedChoiceContract",
        "label": "registeredVoters",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_struct(Voter)941_storage)"
      },
      {
        "astId": 957,
        "contract": "contracts/RankedChoiceContract.sol:RankedChoiceContract",
        "label": "electionAdmin",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      },
      {
        "astId": 959,
        "contract": "contracts/RankedChoiceContract.sol:RankedChoiceContract",
        "label": "isWinnerPicked",
        "offset": 20,
        "slot": "3",
        "type": "t_bool"
      },
      {
        "astId": 961,
        "contract": "contracts/RankedChoiceContract.sol:RankedChoiceContract",
        "label": "areAllActiveCandidatesTied",
        "offset": 21,
        "slot": "3",
        "type": "t_bool"
      },
      {
        "astId": 964,
        "contract": "contracts/RankedChoiceContract.sol:RankedChoiceContract",
        "label": "candidateIdCounter",
        "offset": 0,
        "slot": "4",
        "type": "t_struct(Counter)63_storage"
      },
      {
        "astId": 967,
        "contract": "contracts/RankedChoiceContract.sol:RankedChoiceContract",
        "label": "numberOfCandidates",
        "offset": 0,
        "slot": "5",
        "type": "t_struct(Counter)63_storage"
      },
      {
        "astId": 970,
        "contract": "contracts/RankedChoiceContract.sol:RankedChoiceContract",
        "label": "voterIdCounter",
        "offset": 0,
        "slot": "6",
        "type": "t_struct(Counter)63_storage"
      },
      {
        "astId": 973,
        "contract": "contracts/RankedChoiceContract.sol:RankedChoiceContract",
        "label": "numberOfVoters",
        "offset": 0,
        "slot": "7",
        "type": "t_struct(Counter)63_storage"
      },
      {
        "astId": 976,
        "contract": "contracts/RankedChoiceContract.sol:RankedChoiceContract",
        "label": "numberOfVotersVoted",
        "offset": 0,
        "slot": "8",
        "type": "t_struct(Counter)63_storage"
      },
      {
        "astId": 978,
        "contract": "contracts/RankedChoiceContract.sol:RankedChoiceContract",
        "label": "currentPhase",
        "offset": 0,
        "slot": "9",
        "type": "t_uint16"
      },
      {
        "astId": 980,
        "contract": "contracts/RankedChoiceContract.sol:RankedChoiceContract",
        "label": "startTime",
        "offset": 0,
        "slot": "10",
        "type": "t_uint256"
      },
      {
        "astId": 983,
        "contract": "contracts/RankedChoiceContract.sol:RankedChoiceContract",
        "label": "winner",
        "offset": 0,
        "slot": "11",
        "type": "t_address"
      },
      {
        "astId": 986,
        "contract": "contracts/RankedChoiceContract.sol:RankedChoiceContract",
        "label": "round",
        "offset": 0,
        "slot": "12",
        "type": "t_struct(Counter)63_storage"
      },
      {
        "astId": 989,
        "contract": "contracts/RankedChoiceContract.sol:RankedChoiceContract",
        "label": "firstChoiceVotersAddresses",
        "offset": 0,
        "slot": "13",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 992,
        "contract": "contracts/RankedChoiceContract.sol:RankedChoiceContract",
        "label": "activeCandidatesCounter",
        "offset": 0,
        "slot": "14",
        "type": "t_struct(Counter)63_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_struct(Candidate)927_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct RankedChoiceContract.Candidate)",
        "numberOfBytes": "32",
        "value": "t_struct(Candidate)927_storage"
      },
      "t_mapping(t_address,t_struct(Voter)941_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct RankedChoiceContract.Voter)",
        "numberOfBytes": "32",
        "value": "t_struct(Voter)941_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Candidate)927_storage": {
        "encoding": "inplace",
        "label": "struct RankedChoiceContract.Candidate",
        "members": [
          {
            "astId": 911,
            "contract": "contracts/RankedChoiceContract.sol:RankedChoiceContract",
            "label": "id",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 913,
            "contract": "contracts/RankedChoiceContract.sol:RankedChoiceContract",
            "label": "name",
            "offset": 0,
            "slot": "1",
            "type": "t_string_storage"
          },
          {
            "astId": 915,
            "contract": "contracts/RankedChoiceContract.sol:RankedChoiceContract",
            "label": "walletAddress",
            "offset": 0,
            "slot": "2",
            "type": "t_address"
          },
          {
            "astId": 918,
            "contract": "contracts/RankedChoiceContract.sol:RankedChoiceContract",
            "label": "firstChoiceVoters",
            "offset": 0,
            "slot": "3",
            "type": "t_array(t_address)dyn_storage"
          },
          {
            "astId": 920,
            "contract": "contracts/RankedChoiceContract.sol:RankedChoiceContract",
            "label": "firstVotesCount",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 922,
            "contract": "contracts/RankedChoiceContract.sol:RankedChoiceContract",
            "label": "isEliminated",
            "offset": 0,
            "slot": "5",
            "type": "t_bool"
          },
          {
            "astId": 924,
            "contract": "contracts/RankedChoiceContract.sol:RankedChoiceContract",
            "label": "isWinner",
            "offset": 1,
            "slot": "5",
            "type": "t_bool"
          },
          {
            "astId": 926,
            "contract": "contracts/RankedChoiceContract.sol:RankedChoiceContract",
            "label": "totalVotesCount",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "224"
      },
      "t_struct(Counter)63_storage": {
        "encoding": "inplace",
        "label": "struct Counters.Counter",
        "members": [
          {
            "astId": 62,
            "contract": "contracts/RankedChoiceContract.sol:RankedChoiceContract",
            "label": "_value",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(Voter)941_storage": {
        "encoding": "inplace",
        "label": "struct RankedChoiceContract.Voter",
        "members": [
          {
            "astId": 929,
            "contract": "contracts/RankedChoiceContract.sol:RankedChoiceContract",
            "label": "voterId",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 931,
            "contract": "contracts/RankedChoiceContract.sol:RankedChoiceContract",
            "label": "walletAddress",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 934,
            "contract": "contracts/RankedChoiceContract.sol:RankedChoiceContract",
            "label": "voterChoices",
            "offset": 0,
            "slot": "2",
            "type": "t_array(t_address)dyn_storage"
          },
          {
            "astId": 936,
            "contract": "contracts/RankedChoiceContract.sol:RankedChoiceContract",
            "label": "hasVoted",
            "offset": 0,
            "slot": "3",
            "type": "t_bool"
          },
          {
            "astId": 938,
            "contract": "contracts/RankedChoiceContract.sol:RankedChoiceContract",
            "label": "isRegistered",
            "offset": 1,
            "slot": "3",
            "type": "t_bool"
          },
          {
            "astId": 940,
            "contract": "contracts/RankedChoiceContract.sol:RankedChoiceContract",
            "label": "isCandidate",
            "offset": 2,
            "slot": "3",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_uint16": {
        "encoding": "inplace",
        "label": "uint16",
        "numberOfBytes": "2"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}