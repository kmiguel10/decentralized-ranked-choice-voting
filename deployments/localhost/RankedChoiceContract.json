{
  "address": "0x5FbDB2315678afecb367f032d93F642f64180aa3",
  "abi": [
    {
      "inputs": [],
      "name": "PhaseThree_ThereIsNoWinnerYet",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "voterAddress",
          "type": "address"
        }
      ],
      "name": "PhaseTwo_AlreadyVoted",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "voterAddress",
          "type": "address"
        }
      ],
      "name": "PhaseTwo_CandidateCannotReceiveMultipleVotesFromTheSameVoter",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "voterAddress",
          "type": "address"
        }
      ],
      "name": "PhaseTwo_VoterIsNotRegistered",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "candidateAddress",
          "type": "address"
        }
      ],
      "name": "Voting_CandidateAddressDoesNotExist",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "candidateAddress",
          "type": "address"
        }
      ],
      "name": "Voting_CandidateAlreadyExists",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "voterAddress",
          "type": "address"
        }
      ],
      "name": "Voting_VoterDoesNotExist",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "voterAddress",
          "type": "address"
        }
      ],
      "name": "Voting_VoterIsAlreadyRegistered",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "walletAddress",
          "type": "address"
        }
      ],
      "name": "CandidateCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "walletAddress",
          "type": "address"
        }
      ],
      "name": "CandidateWithdrawn",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "candidateAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "firstVoteCounts",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "round",
          "type": "uint256"
        }
      ],
      "name": "CountVotes_CandidateEliminated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "candidateAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "firstVoteCounts",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "round",
          "type": "uint256"
        }
      ],
      "name": "CountVotes_CandidateWins",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "candidateAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "firstVoteCounts",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "round",
          "type": "uint256"
        }
      ],
      "name": "CountVotes_DeletedReceivedZeroFirstChoiceVotes",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "voterAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address[]",
          "name": "voterChoices",
          "type": "address[]"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "firstChoice",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "secondChoice",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "thirdChoice",
          "type": "address"
        }
      ],
      "name": "Voted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "walletAddress",
          "type": "address"
        }
      ],
      "name": "VoterRegistered",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_candidateAddress",
          "type": "address"
        }
      ],
      "name": "checkIfCandidateExist",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_voterAddress",
          "type": "address"
        }
      ],
      "name": "checkIfVoterExist",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "countVotes",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_candidateName",
          "type": "string"
        }
      ],
      "name": "enterCandidate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_candidateAddress",
          "type": "address"
        }
      ],
      "name": "getCandidateByAddress",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "id",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "address",
              "name": "walletAddress",
              "type": "address"
            },
            {
              "internalType": "address[]",
              "name": "firstChoiceVoters",
              "type": "address[]"
            },
            {
              "internalType": "uint256",
              "name": "firstVotesCount",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "isEliminated",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "isWinner",
              "type": "bool"
            },
            {
              "internalType": "uint256",
              "name": "totalVotesCount",
              "type": "uint256"
            }
          ],
          "internalType": "struct RankedChoiceContract.Candidate",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getNumberOfCandidates",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_voterAddress",
          "type": "address"
        }
      ],
      "name": "getVoterByAddress",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "voterId",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "walletAddress",
              "type": "address"
            },
            {
              "internalType": "address[]",
              "name": "voterChoices",
              "type": "address[]"
            },
            {
              "internalType": "bool",
              "name": "hasVoted",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "isRegistered",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "isCandidate",
              "type": "bool"
            }
          ],
          "internalType": "struct RankedChoiceContract.Voter",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getWinner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "numberOfVoters",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_value",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "numberOfVotersVoted",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_value",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "registerToVote",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "firstChoice",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "secondChoice",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "thirdChoice",
          "type": "address"
        }
      ],
      "name": "vote",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "winner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdrawCandidate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x0dc473cc843b23de4a599b63c0aad251e350b10be595f38f761966d461cbb0e2",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0x5FbDB2315678afecb367f032d93F642f64180aa3",
    "transactionIndex": 0,
    "gasUsed": "3833113",
    "logsBloom": "0x
    "blockHash": "0x96022f0678a53b1be3f907450559bac97b9d3ae2da5797815ac1c2b898352360",
    "transactionHash": "0x0dc473cc843b23de4a599b63c0aad251e350b10be595f38f761966d461cbb0e2",
    "logs": [],
    "blockNumber": 1,
    "cumulativeGasUsed": "3833113",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "28e50f4b55bb5235da89e0f3fc0b6ad3",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"PhaseThree_ThereIsNoWinnerYet\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"voterAddress\",\"type\":\"address\"}],\"name\":\"PhaseTwo_AlreadyVoted\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"voterAddress\",\"type\":\"address\"}],\"name\":\"PhaseTwo_CandidateCannotReceiveMultipleVotesFromTheSameVoter\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"voterAddress\",\"type\":\"address\"}],\"name\":\"PhaseTwo_VoterIsNotRegistered\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"candidateAddress\",\"type\":\"address\"}],\"name\":\"Voting_CandidateAddressDoesNotExist\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"candidateAddress\",\"type\":\"address\"}],\"name\":\"Voting_CandidateAlreadyExists\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"voterAddress\",\"type\":\"address\"}],\"name\":\"Voting_VoterDoesNotExist\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"voterAddress\",\"type\":\"address\"}],\"name\":\"Voting_VoterIsAlreadyRegistered\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"walletAddress\",\"type\":\"address\"}],\"name\":\"CandidateCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"walletAddress\",\"type\":\"address\"}],\"name\":\"CandidateWithdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"candidateAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"firstVoteCounts\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"round\",\"type\":\"uint256\"}],\"name\":\"CountVotes_CandidateEliminated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"candidateAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"firstVoteCounts\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"round\",\"type\":\"uint256\"}],\"name\":\"CountVotes_CandidateWins\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"candidateAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"firstVoteCounts\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"round\",\"type\":\"uint256\"}],\"name\":\"CountVotes_DeletedReceivedZeroFirstChoiceVotes\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"voterAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"voterChoices\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"firstChoice\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"secondChoice\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"thirdChoice\",\"type\":\"address\"}],\"name\":\"Voted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"walletAddress\",\"type\":\"address\"}],\"name\":\"VoterRegistered\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_candidateAddress\",\"type\":\"address\"}],\"name\":\"checkIfCandidateExist\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_voterAddress\",\"type\":\"address\"}],\"name\":\"checkIfVoterExist\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"countVotes\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_candidateName\",\"type\":\"string\"}],\"name\":\"enterCandidate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_candidateAddress\",\"type\":\"address\"}],\"name\":\"getCandidateByAddress\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"walletAddress\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"firstChoiceVoters\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"firstVotesCount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isEliminated\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isWinner\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"totalVotesCount\",\"type\":\"uint256\"}],\"internalType\":\"struct RankedChoiceContract.Candidate\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNumberOfCandidates\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_voterAddress\",\"type\":\"address\"}],\"name\":\"getVoterByAddress\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"voterId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"walletAddress\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"voterChoices\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"hasVoted\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isRegistered\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isCandidate\",\"type\":\"bool\"}],\"internalType\":\"struct RankedChoiceContract.Voter\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getWinner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"numberOfVoters\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"numberOfVotersVoted\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"registerToVote\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"firstChoice\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"secondChoice\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"thirdChoice\",\"type\":\"address\"}],\"name\":\"vote\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"winner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawCandidate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Kent Miguel\",\"details\":\"uses chainlink automation to end register, voting, and count phases\",\"kind\":\"dev\",\"methods\":{\"countVotes()\":{\"details\":\"see pointer below: 1. If a candidate has >= 50% of the votes + 1 then he/she is the winner 2. ...if no winner in round 1, go to the next round and distribute the 2nc choice of the 1st choice voters of the eliminated candidate(s) 3. count again\"},\"enterCandidate(string)\":{\"details\":\"will be registered to vote automatically and will be disabled when register phase is over\",\"params\":{\"_candidateName\":\"The name of the candidate\"}},\"registerToVote()\":{\"details\":\"1. users who enter as a candidate will be registered automatically, will be disabled at the end of phase 1 2. Optimize this by accessing struct once and store it in a local variable and use that for the checks.. see coverage first and gas viewer\"},\"vote(address,address,address)\":{\"details\":\"come back to implement checks: 1. phase switches 2. flags: isRegistered, hasVoted 3. Update points for candidate structs\"},\"withdrawCandidate()\":{\"details\":\"checks:      1 . disabled when register phase is over      2. check that person who registered are only the one who can withdraw      3. check that cannot withdraw if entry does not exist\"}},\"title\":\"A Ranked Choice Voting Smart Contract\",\"version\":1},\"userdoc\":{\"errors\":{\"Voting_CandidateAlreadyExists(address)\":[{\"notice\":\"Errors ///\"}]},\"kind\":\"user\",\"methods\":{\"countVotes()\":{\"notice\":\"this function calculates the votes to get the winner\"},\"enterCandidate(string)\":{\"notice\":\"this functions registers candidates\"},\"getCandidateByAddress(address)\":{\"notice\":\"Getter functions ///\"},\"registerToVote()\":{\"notice\":\"this function register voters to vote for phase 2: Voting\"},\"vote(address,address,address)\":{\"notice\":\"this function allows voters to vote their choices in the election\"},\"winner()\":{\"notice\":\"phase 3 variables\"},\"withdrawCandidate()\":{\"notice\":\"withdraws from election\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/RankedChoiceContract.sol\":\"RankedChoiceContract\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/Counters.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary Counters {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\",\"keccak256\":\"0xf0018c2440fbe238dd3a8732fa8e17a0f9dce84d31451dc8a32f6d62b349c9f1\",\"license\":\"MIT\"},\"contracts/RankedChoiceContract.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/utils/Counters.sol\\\";\\nimport \\\"hardhat/console.sol\\\";\\n\\n/// Errors ///\\nerror Voting_CandidateAlreadyExists(address candidateAddress);\\nerror Voting_CandidateAddressDoesNotExist(address candidateAddress);\\nerror Voting_VoterIsAlreadyRegistered(address voterAddress);\\nerror Voting_VoterDoesNotExist(address voterAddress);\\nerror PhaseTwo_RegisteringPhaseIsOver(address voterAddress);\\nerror PhaseTwo_EnteringCandidatePhaseIsOver(address voterAddress);\\nerror PhaseTwo_CannotWithdrawPhaseOneIsOver(address voterAddress);\\nerror PhaseTwo_AlreadyVoted(address voterAddress);\\nerror PhaseTwo_VoterIsNotRegistered(address voterAddress);\\nerror PhaseTwo_CandidateCannotReceiveMultipleVotesFromTheSameVoter(\\n    address voterAddress\\n);\\nerror PhaseThree_ThereIsNoWinnerYet();\\n\\n/**\\n * @title A Ranked Choice Voting Smart Contract\\n * @author Kent Miguel\\n * @dev uses chainlink automation to end register, voting, and count phases\\n */\\ncontract RankedChoiceContract {\\n    using Counters for Counters.Counter;\\n\\n    //Events\\n    event CandidateCreated(\\n        uint256 indexed id,\\n        string indexed name,\\n        address indexed walletAddress\\n    );\\n\\n    event CandidateWithdrawn(\\n        uint256 indexed id,\\n        string indexed name,\\n        address indexed walletAddress\\n    );\\n\\n    event VoterRegistered(uint256 indexed id, address indexed walletAddress);\\n\\n    event Voted(\\n        uint256 indexed id,\\n        address indexed voterAddress,\\n        address[] voterChoices,\\n        address firstChoice,\\n        address secondChoice,\\n        address thirdChoice\\n    );\\n\\n    event CountVotes_DeletedReceivedZeroFirstChoiceVotes(\\n        address indexed candidateAddress,\\n        uint256 firstVoteCounts,\\n        uint256 round\\n    );\\n\\n    event CountVotes_CandidateWins(\\n        address indexed candidateAddress,\\n        uint256 firstVoteCounts,\\n        uint256 round\\n    );\\n\\n    event CountVotes_CandidateEliminated(\\n        address indexed candidateAddress,\\n        uint256 firstVoteCounts,\\n        uint256 round\\n    );\\n\\n    /// Candidate variables ///\\n    // we might only need 1st choice vote counts... the rest of the vote counts might only be needed if we alocate the points there for visual and metric analysis for the front end...\\n    struct Candidate {\\n        uint256 id;\\n        string name;\\n        address walletAddress;\\n        address[] firstChoiceVoters;\\n        uint256 firstVotesCount;\\n        bool isEliminated;\\n        bool isWinner;\\n        uint256 totalVotesCount;\\n    }\\n\\n    ///Voter choice will be stored in an array , the push and pop nature can be used as a stack, store 3rd choice first and 1st choice last... that way we can keep popping choices for each round.\\n    struct Voter {\\n        uint256 voterId;\\n        // string name;\\n        address walletAddress;\\n        address[] voterChoices;\\n        bool hasVoted;\\n        bool isRegistered;\\n        bool isCandidate;\\n    }\\n\\n    address[] private candidateAddresses; //array of candidates\\n    //mapping(uint256 => mapping(address => Candidate)) private addressToCandidate;\\n    mapping(address => Candidate) private addressToCandidate;\\n    mapping(address => Voter) private registeredVoters;\\n\\n    /// Voter variables ///\\n\\n    /// Election global variables ///\\n    bool phaseOneSwitch;\\n    bool phaseTwoSwitch;\\n    bool phaseThreeSwitch;\\n    bool isWinnerPicked; //TODO initialize to false in the constructor\\n    Counters.Counter private candidateIdCounter;\\n    Counters.Counter private numberOfCandidates;\\n    Counters.Counter private voterIdCounter;\\n    Counters.Counter public numberOfVoters;\\n    Counters.Counter public numberOfVotersVoted;\\n    uint256 constant FIRST_CHOICE = 3;\\n    uint256 constant SECOND_CHOICE = 2;\\n    uint256 constant THIRD_CHOICE = 1;\\n\\n    /// phase 3 variables\\n    //uint256 private highestVote = 0;\\n    address public winner;\\n    Counters.Counter private round;\\n    address[] private firstChoiceVotersAddresses;\\n    Counters.Counter private activeCandidatesCounter;\\n\\n    //mapping candidate address to struct\\n\\n    //create a constructor to start timer for phases\\n    //must initialize the state of voting\\n\\n    /** Functions */\\n\\n    /**\\n     * @notice this function register voters to vote for phase 2: Voting\\n     * @dev\\n     * 1. users who enter as a candidate will be registered automatically, will be disabled at the end of phase 1\\n     * 2. Optimize this by accessing struct once and store it in a local variable and use that for the checks.. see coverage first and gas viewer\\n     *\\n     */\\n    function registerToVote() public {\\n        //check for non-candidate voters\\n        if (\\n            checkIfVoterExist(msg.sender) &&\\n            registeredVoters[msg.sender].isCandidate == false\\n        ) {\\n            revert Voting_VoterIsAlreadyRegistered(msg.sender);\\n        }\\n\\n        //check for candidates\\n        if (\\n            checkIfVoterExist(msg.sender) &&\\n            registeredVoters[msg.sender].isCandidate == true\\n        ) {\\n            revert Voting_VoterIsAlreadyRegistered(msg.sender);\\n        }\\n\\n        voterIdCounter.increment();\\n        numberOfVoters.increment();\\n\\n        uint256 _voterId = voterIdCounter.current();\\n\\n        address[] memory _Voterchoices;\\n\\n        Voter memory voter = Voter(\\n            _voterId,\\n            msg.sender,\\n            _Voterchoices,\\n            false,\\n            true,\\n            false\\n        );\\n\\n        registeredVoters[msg.sender] = voter;\\n\\n        //emit event\\n        emit VoterRegistered(_voterId, msg.sender);\\n    }\\n\\n    /**\\n     * @notice this functions registers candidates\\n     * @param _candidateName The name of the candidate\\n     * @dev will be registered to vote automatically and will be disabled when register phase is over\\n     */\\n    function enterCandidate(\\n        // address _candidateAddress,\\n        string memory _candidateName // uint256 _firstVotesCount, // uint256 _secondVotesCount, // uint256 _thirdVotesCount\\n    ) external {\\n        if (checkIfCandidateExist(msg.sender)) {\\n            revert Voting_CandidateAlreadyExists(msg.sender);\\n        }\\n\\n        //assign candidate id number\\n        candidateIdCounter.increment();\\n        numberOfCandidates.increment();\\n        activeCandidatesCounter.increment();\\n        uint256 _candidateId = candidateIdCounter.current();\\n\\n        address[] memory _firstChoiceVoters;\\n\\n        //create candidate struct\\n        // Candidate memory candidate = addressToCandidate[_candidateAddress];\\n        Candidate memory candidate = Candidate(\\n            _candidateId,\\n            _candidateName,\\n            // _candidateAddress,\\n            msg.sender,\\n            _firstChoiceVoters,\\n            0,\\n            false,\\n            false,\\n            0\\n        );\\n\\n        //store candidate struct in mapping\\n        addressToCandidate[msg.sender] = candidate;\\n\\n        //store user address to registeredVoter mapping\\n        //emit event\\n\\n        //push to candidate address\\n        candidateAddresses.push(msg.sender);\\n\\n        //emit CandidateRegistered event\\n        emit CandidateCreated(\\n            candidate.id,\\n            candidate.name,\\n            candidate.walletAddress\\n        );\\n        //if entering again after withdrawing then doesnt need to register again\\n        if (registeredVoters[msg.sender].voterId <= 0) {\\n            registerToVote();\\n            registeredVoters[msg.sender].isCandidate = true;\\n        }\\n    }\\n\\n    /**\\n     * @notice withdraws from election\\n     * @dev checks:\\n     *      1 . disabled when register phase is over\\n     *      2. check that person who registered are only the one who can withdraw\\n     *      3. check that cannot withdraw if entry does not exist\\n     */\\n    function withdrawCandidate() external {\\n        if (addressToCandidate[msg.sender].id <= 0) {\\n            revert Voting_CandidateAddressDoesNotExist(msg.sender);\\n        }\\n\\n        Candidate memory _candidate = addressToCandidate[msg.sender];\\n\\n        delete (addressToCandidate[msg.sender]);\\n        numberOfCandidates.decrement();\\n        activeCandidatesCounter.decrement();\\n        emit CandidateWithdrawn(\\n            _candidate.id,\\n            _candidate.name,\\n            _candidate.walletAddress\\n        );\\n    }\\n\\n    /// Phase 2 Functions ///\\n\\n    /**\\n     * @notice this function turns on the phase 2 (voting) switch which disables phase 1 functionalities\\n     * @dev look for checks\\n     */\\n    function beginPhaseTwo() private {\\n        phaseOneSwitch = false;\\n        phaseTwoSwitch = true;\\n    }\\n\\n    /**\\n     * @notice this function allows voters to vote their choices in the election\\n     * @dev come back to implement checks:\\n     * 1. phase switches\\n     * 2. flags: isRegistered, hasVoted\\n     * 3. Update points for candidate structs\\n     */\\n    function vote(\\n        address firstChoice,\\n        address secondChoice,\\n        address thirdChoice\\n    ) public {\\n        //checks\\n        if (checkIfVoterExist(msg.sender) == false) {\\n            revert Voting_VoterDoesNotExist(msg.sender);\\n        }\\n\\n        Voter storage _voter = registeredVoters[msg.sender];\\n\\n        if (_voter.isRegistered == false) {\\n            revert PhaseTwo_VoterIsNotRegistered(msg.sender);\\n        }\\n\\n        if (_voter.hasVoted == true) {\\n            revert PhaseTwo_AlreadyVoted(msg.sender);\\n        }\\n\\n        //checks if candidates exist\\n        if (checkIfCandidateExist(firstChoice) == false) {\\n            revert Voting_CandidateAddressDoesNotExist(firstChoice);\\n        }\\n        if (checkIfCandidateExist(secondChoice) == false) {\\n            revert Voting_CandidateAddressDoesNotExist(secondChoice);\\n        }\\n        if (checkIfCandidateExist(thirdChoice) == false) {\\n            revert Voting_CandidateAddressDoesNotExist(thirdChoice);\\n        }\\n\\n        //checks for candidates must exist - there must be an efficient way, maybe use a mapping\\n        if (\\n            firstChoice == secondChoice ||\\n            firstChoice == thirdChoice ||\\n            secondChoice == thirdChoice\\n        ) {\\n            revert PhaseTwo_CandidateCannotReceiveMultipleVotesFromTheSameVoter(\\n                msg.sender\\n            );\\n        }\\n\\n        //need a check for picking same candidate multiple times... cannot happen\\n\\n        //updates\\n        //look for first choice and add voter to the array of firstChoice voters - can definitely improve this...\\n        //we are accessing storage multiple times...\\n        Candidate storage _firstChoice = addressToCandidate[firstChoice];\\n        _firstChoice.firstChoiceVoters.push(msg.sender);\\n        _firstChoice.firstVotesCount = _firstChoice.firstChoiceVoters.length;\\n\\n        addressToCandidate[firstChoice] = _firstChoice;\\n\\n        //add voter's choices\\n        //add 1st choice last in order to pop in this order 1st -> 2nd -> 3rd for each round\\n        _voter.voterChoices.push(thirdChoice);\\n        _voter.voterChoices.push(secondChoice);\\n        _voter.voterChoices.push(firstChoice);\\n\\n        //change flags\\n        _voter.hasVoted = true;\\n        registeredVoters[msg.sender] = _voter;\\n        numberOfVotersVoted.increment();\\n\\n        //emit event\\n        emit Voted(\\n            _voter.voterId,\\n            _voter.walletAddress,\\n            _voter.voterChoices,\\n            firstChoice,\\n            secondChoice,\\n            thirdChoice\\n        );\\n    }\\n\\n    /// Phase 3: Count Votes\\n\\n    /**\\n     * @notice this function calculates the votes to get the winner\\n     * @dev see pointer below:\\n     * 1. If a candidate has >= 50% of the votes + 1 then he/she is the winner\\n     * 2. ...if no winner in round 1, go to the next round and distribute the 2nc choice of the 1st choice voters of the eliminated candidate(s)\\n     * 3. count again\\n     */\\n    function countVotes() public {\\n        ///TODO checks\\n        //if phase2 is over - check flags\\n\\n        //uint256 highestVote = 0;\\n        uint256 totalPossibleVotes = numberOfVotersVoted.current();\\n        uint256 threshold = (totalPossibleVotes / 2) + 1;\\n        //Should this be inside the while loop so it will get reset at each iteration\\n        //address[] memory firstChoiceVotersOfEliminatedCandidates;\\n\\n        //TODO wrap in while loop\\n        console.log(\\n            \\\"isWinnerPicked before entering while loop\\\",\\n            isWinnerPicked\\n        );\\n\\n        while (isWinnerPicked == false) {\\n            // calculate total votes for each candidates\\n            // need to check for edge cases\\n            // we can have a helper function for round1\\n            //this can be a helper function\\n            countFirstChoiceVotes(threshold);\\n\\n            //can move this ins\\n            //distribute eliminated candidates - firstChoiceVoter points\\n            console.log(\\n                \\\"isWinnerPicked before entering distributeVotes\\\",\\n                isWinnerPicked\\n            );\\n\\n            //TODO delete this after testing\\n            console.log(\\n                \\\"First choice votes array length\\\",\\n                firstChoiceVotersAddresses.length\\n            );\\n            console.log(\\n                \\\"Number of active voters left: \\\",\\n                activeCandidatesCounter.current()\\n            );\\n            if (isWinnerPicked == false) {\\n                console.log(\\\"Distributing votes\\\");\\n                distributeVotes();\\n            }\\n\\n            console.log(\\n                \\\"Number of candidates after distributing votes\\\",\\n                numberOfCandidates.current()\\n            );\\n\\n            //TODO delete, this is for testing..\\n            //isWinnerPicked = true;\\n            //testFlag = testFlag - 1;\\n        }\\n    }\\n\\n    /**\\n     * @notice this is a helper function for countVotes() to count firstChoice votes for each candidate\\n     *\\n     */\\n    function countFirstChoiceVotes(uint256 _threshold) private {\\n        //TODO\\n        //check if there is only 1 remaining candidate - Edge Case\\n        //delete firstChoiceVotersAddresses; - commented to test clearing this arr at the end of distributeVotes()\\n\\n        //Increment round number\\n        round.increment();\\n\\n        console.log(\\\"Round: \\\", round.current());\\n\\n        uint256 highestVote = 0;\\n        uint256 lowestVote = _threshold;\\n\\n        //Active candidates\\n        //activeCandidatesCounter.reset();\\n\\n        console.log(\\\"HighestVote\\\", highestVote);\\n        console.log(\\\"LowestVote\\\", lowestVote);\\n\\n        //array to keep track of lowest vote getters\\n        //address[] memory lowestVoteGetters;\\n\\n        console.log(\\\"Counting votes\\\");\\n        console.log(\\\"Number of candidates\\\", numberOfCandidates.current());\\n\\n        for (uint256 i = 0; i < numberOfCandidates.current(); i++) {\\n            //There variables will reset after each iteration\\n            address _candidateAddress = candidateAddresses[i];\\n\\n            if (checkIfCandidateExist(_candidateAddress) == true) {\\n                Candidate memory _candidate = addressToCandidate[\\n                    _candidateAddress\\n                ];\\n\\n                console.log(\\\"Checking candidate: \\\", _candidateAddress);\\n                console.log(\\\"Number of votes: \\\", _candidate.firstVotesCount);\\n\\n                //Delete 0 firstChoice getters\\n                if (_candidate.firstVotesCount == 0) {\\n                    console.log(\\\"Deleting candidate\\\", _candidateAddress);\\n                    // delete candidate from mapping\\n                    delete (addressToCandidate[_candidateAddress]);\\n\\n                    //emit Event - received 0 votes\\n                    emit CountVotes_DeletedReceivedZeroFirstChoiceVotes(\\n                        _candidateAddress,\\n                        _candidate.firstVotesCount,\\n                        round.current()\\n                    );\\n\\n                    activeCandidatesCounter.decrement();\\n                } else if (_candidate.firstVotesCount >= _threshold) {\\n                    highestVote = _candidate.firstVotesCount;\\n                    winner = _candidate.walletAddress;\\n                    isWinnerPicked = true;\\n                    console.log(\\\"Found winner\\\", winner);\\n                    emit CountVotes_CandidateWins(\\n                        winner,\\n                        highestVote,\\n                        round.current()\\n                    );\\n                } else if (_candidate.firstVotesCount <= lowestVote) {\\n                    //how do we keep track of the lowest votes\\n                    lowestVote = _candidate.firstVotesCount;\\n                    console.log(\\\"lowestVote after comparison\\\", lowestVote);\\n                } else if (_candidate.firstVotesCount > highestVote) {\\n                    //keeps track of highest vote\\n                    highestVote = _candidate.firstVotesCount;\\n                    console.log(\\\"highestVote after comparison\\\", lowestVote);\\n                }\\n            }\\n        }\\n\\n        //get the lowest vote getters at the end of the round and eliminate\\n        //and switch the isEliminated flag to true, when distributing votes, make sure to check the flag in order to NOT give the points to an already eliminated candidate\\n        //get lowest vote candidates - at this point we know the lowest vote count, so traverse the list of candidates again\\n        // save the firstChoiceVoters to array\\n\\n        if (isWinnerPicked == false) {\\n            for (uint256 i = 0; i < numberOfCandidates.current(); i++) {\\n                address _candidateAddress = candidateAddresses[i];\\n\\n                if (checkIfCandidateExist(_candidateAddress) == true) {\\n                    Candidate memory _candidate = addressToCandidate[\\n                        _candidateAddress\\n                    ];\\n\\n                    console.log(\\\"Received lowest votes\\\", _candidateAddress);\\n\\n                    //if candidate received lowest vote, then eliminate and store firstVote voters to array to be distributed\\n                    if (_candidate.firstVotesCount == lowestVote) {\\n                        _candidate.isEliminated = true;\\n                        emit CountVotes_CandidateEliminated(\\n                            _candidate.walletAddress,\\n                            _candidate.firstVotesCount,\\n                            round.current()\\n                        );\\n                        if (_candidate.firstVotesCount > 0) {\\n                            for (\\n                                uint256 j = 0;\\n                                j < _candidate.firstVotesCount;\\n                                j++\\n                            ) {\\n                                firstChoiceVotersAddresses.push(\\n                                    _candidate.firstChoiceVoters[j]\\n                                );\\n                                console.log(\\n                                    \\\"These voters will go to their next choice: \\\",\\n                                    _candidate.firstChoiceVoters[j]\\n                                );\\n                            }\\n                        }\\n\\n                        //delete candidate\\n                        delete (addressToCandidate[_candidateAddress]);\\n                        activeCandidatesCounter.decrement();\\n                    }\\n\\n                    if (\\n                        // _candidate.firstVotesCount == highestVote &&\\n                        activeCandidatesCounter.current() == 1\\n                    ) {\\n                        // if there is only 1 active candidate left then that is the winner\\n                        highestVote = _candidate.firstVotesCount;\\n                        winner = _candidate.walletAddress;\\n                        isWinnerPicked = true;\\n                        console.log(\\\"Found winner\\\", winner);\\n                        emit CountVotes_CandidateWins(\\n                            winner,\\n                            highestVote,\\n                            round.current()\\n                        );\\n                    }\\n                }\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice this function distributes the first choice votes of the eliminated (lowest) vote candidates to their next ranked candidates\\n     */\\n    function distributeVotes() internal {\\n        //FIXME theres an infinite loop somwhere..NEED to test this manually.. need to break it down to make sure the arrays hold the correct addresses etc... need to create helper functions... for individual tests for each step of the process..\\n        //traverse firstChoiceVoters addresses to get address\\n        console.log(\\n            \\\"No winner last round so will distribute vote\\\",\\n            firstChoiceVotersAddresses.length\\n        );\\n\\n        for (uint256 i = 0; i < firstChoiceVotersAddresses.length; i++) {\\n            //get Voter\\n            Voter storage _voter = registeredVoters[\\n                firstChoiceVotersAddresses[i]\\n            ];\\n\\n            console.log(\\\"Distribute voter: \\\", firstChoiceVotersAddresses[i]);\\n\\n            //pop the 1st choice vote\\n            //need to test that the vote went to the next choice\\n            if (_voter.voterChoices.length > 0) {\\n                _voter.voterChoices.pop();\\n                //access the next choice - get length of voterChoices-1 as index\\n                if (_voter.voterChoices.length > 0) {\\n                    //distribute vote for the next choice\\n                    uint256 index = _voter.voterChoices.length - 1;\\n                    //check if candidate exists\\n                    if (checkIfCandidateExist(_voter.voterChoices[index])) {\\n                        Candidate storage _candidate = addressToCandidate[\\n                            _voter.voterChoices[index]\\n                        ];\\n                        _candidate.firstChoiceVoters.push(_voter.walletAddress);\\n                        _candidate.firstVotesCount = _candidate\\n                            .firstChoiceVoters\\n                            .length;\\n\\n                        console.log(\\n                            \\\"Candidate received vote\\\",\\n                            _voter.voterChoices[index]\\n                        );\\n\\n                        //             //TODO check if it is necessary to save candidate after updating its array if its already accessed by storage\\n                        addressToCandidate[\\n                            _voter.voterChoices[index]\\n                        ] = _candidate;\\n                    } //should we have an else part to give the point to the next choice if the current choice is already eliminated?\\n                }\\n            }\\n        }\\n\\n        //clear firstChoiceVotersAddresses here\\n        while (firstChoiceVotersAddresses.length > 0) {\\n            firstChoiceVotersAddresses.pop();\\n        }\\n\\n        console.log(\\n            \\\"firstChoiceVotersAddresses.length\\\",\\n            firstChoiceVotersAddresses.length\\n        );\\n    }\\n\\n    /// Getter functions ///\\n    function getCandidateByAddress(address _candidateAddress)\\n        external\\n        view\\n        returns (Candidate memory)\\n    {\\n        if (addressToCandidate[_candidateAddress].id <= 0) {\\n            revert Voting_CandidateAddressDoesNotExist(_candidateAddress);\\n        }\\n        return addressToCandidate[_candidateAddress];\\n    }\\n\\n    function getVoterByAddress(address _voterAddress)\\n        external\\n        view\\n        returns (Voter memory)\\n    {\\n        if (registeredVoters[_voterAddress].voterId <= 0) {\\n            revert Voting_VoterDoesNotExist(_voterAddress);\\n        }\\n        return registeredVoters[_voterAddress];\\n    }\\n\\n    function checkIfCandidateExist(address _candidateAddress)\\n        public\\n        view\\n        returns (bool)\\n    {\\n        return (addressToCandidate[_candidateAddress].id > 0) ? true : false;\\n    }\\n\\n    function checkIfVoterExist(address _voterAddress)\\n        public\\n        view\\n        returns (bool)\\n    {\\n        return (registeredVoters[_voterAddress].voterId > 0) ? true : false;\\n    }\\n\\n    function getNumberOfCandidates() public view returns (uint256) {\\n        return numberOfCandidates.current();\\n    }\\n\\n    function getWinner() public view returns (address) {\\n        //check - only allowed to call if isWinnerPicked is true\\n        if (isWinnerPicked == false) {\\n            revert PhaseThree_ThereIsNoWinnerYet();\\n        }\\n        return winner;\\n    }\\n}\\n\",\"keccak256\":\"0x449397aafed3c3dcc3f5da3d27fc70fa2df8bb5d6056070fc3051f81bff8c8fc\",\"license\":\"MIT\"},\"hardhat/console.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >= 0.4.22 <0.9.0;\\n\\nlibrary console {\\n\\taddress constant CONSOLE_ADDRESS = address(0x000000000000000000636F6e736F6c652e6c6f67);\\n\\n\\tfunction _sendLogPayload(bytes memory payload) private view {\\n\\t\\tuint256 payloadLength = payload.length;\\n\\t\\taddress consoleAddress = CONSOLE_ADDRESS;\\n\\t\\tassembly {\\n\\t\\t\\tlet payloadStart := add(payload, 32)\\n\\t\\t\\tlet r := staticcall(gas(), consoleAddress, payloadStart, payloadLength, 0, 0)\\n\\t\\t}\\n\\t}\\n\\n\\tfunction log() internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log()\\\"));\\n\\t}\\n\\n\\tfunction logInt(int256 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(int256)\\\", p0));\\n\\t}\\n\\n\\tfunction logUint(uint256 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256)\\\", p0));\\n\\t}\\n\\n\\tfunction logString(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction logBool(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction logAddress(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes(bytes memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes1(bytes1 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes1)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes2(bytes2 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes2)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes3(bytes3 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes3)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes4(bytes4 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes4)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes5(bytes5 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes5)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes6(bytes6 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes6)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes7(bytes7 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes7)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes8(bytes8 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes8)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes9(bytes9 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes9)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes10(bytes10 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes10)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes11(bytes11 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes11)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes12(bytes12 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes12)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes13(bytes13 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes13)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes14(bytes14 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes14)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes15(bytes15 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes15)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes16(bytes16 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes16)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes17(bytes17 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes17)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes18(bytes18 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes18)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes19(bytes19 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes19)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes20(bytes20 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes20)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes21(bytes21 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes21)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes22(bytes22 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes22)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes23(bytes23 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes23)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes24(bytes24 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes24)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes25(bytes25 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes25)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes26(bytes26 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes26)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes27(bytes27 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes27)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes28(bytes28 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes28)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes29(bytes29 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes29)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes30(bytes30 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes30)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes31(bytes31 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes31)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes32(bytes32 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes32)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint256 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256)\\\", p0));\\n\\t}\\n\\n\\tfunction log(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction log(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction log(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n}\\n\",\"keccak256\":\"0x60b0215121bf25612a6739fb2f1ec35f31ee82e4a8216c032c8243d904ab3aa9\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5061449b806100206000396000f3fe608060405234801561001057600080fd5b50600436106100ea5760003560e01c80638e7ea5b21161008c578063b647990a11610066578063b647990a1461024d578063d252142914610257578063dfbf53ae14610261578063f7610be01461027f576100ea565b80638e7ea5b2146101e15780639bcc3361146101ff578063ad25e8291461021d576100ea565b80634bdd7585116100c85780634bdd75851461016b5780637061bfcf1461019b5780637a84d13e146101b95780638b98e7b1146101d7576100ea565b8063193add06146100ef5780632b929d641461011f578063321a04891461013b575b600080fd5b61010960048036038101906101049190613890565b61029b565b60405161011691906138d8565b60405180910390f35b61013960048036038101906101349190613a39565b6102f7565b005b61015560048036038101906101509190613890565b61066b565b60405161016291906138d8565b60405180910390f35b61018560048036038101906101809190613890565b6106c7565b6040516101929190613bf1565b60405180910390f35b6101a36108e6565b6040516101b09190613c22565b60405180910390f35b6101c16108f2565b6040516101ce9190613c22565b60405180910390f35b6101df610903565b005b6101e9610c25565b6040516101f69190613c4c565b60405180910390f35b610207610c9a565b6040516102149190613c22565b60405180910390f35b61023760048036038101906102329190613890565b610ca6565b6040516102449190613da6565b60405180910390f35b610255610f51565b005b61025f61111f565b005b610269611505565b6040516102769190613c4c565b60405180910390f35b61029960048036038101906102949190613dc8565b61152b565b005b600080600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000154116102ed5760006102f0565b60015b9050919050565b6103003361029b565b1561034257336040517fa4a2360c0000000000000000000000000000000000000000000000000000000081526004016103399190613c4c565b60405180910390fd5b61034c6004611d89565b6103566005611d89565b610360600c611d89565b600061036c6004611d9f565b9050606060006040518061010001604052808481526020018581526020013373ffffffffffffffffffffffffffffffffffffffff168152602001838152602001600081526020016000151581526020016000151581526020016000815250905080600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082015181600001556020820151816001019080519060200190610432929190613500565b5060408201518160020160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506060820151816003019080519060200190610496929190613586565b506080820151816004015560a08201518160050160006101000a81548160ff02191690831515021790555060c08201518160050160016101000a81548160ff02191690831515021790555060e082015181600601559050506000339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550806040015173ffffffffffffffffffffffffffffffffffffffff16816020015160405161057e9190613e57565b604051809103902082600001517f548af351e0d3cac7bd58378a494326c2989919dca076c78773a389b714bfcbd160405160405180910390a46000600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600001541161066557610609610903565b6001600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060030160026101000a81548160ff0219169083151502179055505b50505050565b600080600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000154116106bd5760006106c0565b60015b9050919050565b6106cf613610565b6000600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600001541161075657816040517f2986939500000000000000000000000000000000000000000000000000000000815260040161074d9190613c4c565b60405180910390fd5b600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206040518060c0016040529081600082015481526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016002820180548060200260200160405190810160405280929190818152602001828054801561088557602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001906001019080831161083b575b505050505081526020016003820160009054906101000a900460ff161515151581526020016003820160019054906101000a900460ff161515151581526020016003820160029054906101000a900460ff1615151515815250509050919050565b60088060000154905081565b60006108fe6005611d9f565b905090565b61090c3361066b565b801561096b575060001515600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060030160029054906101000a900460ff161515145b156109ad57336040517fa7ebb3c20000000000000000000000000000000000000000000000000000000081526004016109a49190613c4c565b60405180910390fd5b6109b63361066b565b8015610a15575060011515600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060030160029054906101000a900460ff161515145b15610a5757336040517fa7ebb3c2000000000000000000000000000000000000000000000000000000008152600401610a4e9190613c4c565b60405180910390fd5b610a616006611d89565b610a6b6007611d89565b6000610a776006611d9f565b9050606060006040518060c001604052808481526020013373ffffffffffffffffffffffffffffffffffffffff16815260200183815260200160001515815260200160011515815260200160001515815250905080600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000820151816000015560208201518160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506040820151816002019080519060200190610b78929190613586565b5060608201518160030160006101000a81548160ff02191690831515021790555060808201518160030160016101000a81548160ff02191690831515021790555060a08201518160030160026101000a81548160ff0219169083151502179055509050503373ffffffffffffffffffffffffffffffffffffffff16837ff45b8429c36d478f9a6d081c4811a819b98aa5b608588bed9d406405cf28247360405160405180910390a3505050565b600080151560038054906101000a900460ff1615151415610c72576040517f944558c800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60078060000154905081565b610cae613662565b6000600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000015411610d3557816040517f098e6258000000000000000000000000000000000000000000000000000000008152600401610d2c9190613c4c565b60405180910390fd5b600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206040518061010001604052908160008201548152602001600182018054610d9a90613e9d565b80601f0160208091040260200160405190810160405280929190818152602001828054610dc690613e9d565b8015610e135780601f10610de857610100808354040283529160200191610e13565b820191906000526020600020905b815481529060010190602001808311610df657829003601f168201915b505050505081526020016002820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200160038201805480602002602001604051908101604052809291908181526020018280548015610ef757602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311610ead575b50505050508152602001600482015481526020016005820160009054906101000a900460ff161515151581526020016005820160019054906101000a900460ff161515151581526020016006820154815250509050919050565b6000610f5d6008611d9f565b905060006001600283610f709190613f2d565b610f7a9190613f5e565b9050610fab60405180606001604052806029815260200161440f6029913960038054906101000a900460ff16611dad565b5b6000151560038054906101000a900460ff161515141561111b57610fcf81611e49565b610ffe6040518060600160405280602e8152602001614438602e913960038054906101000a900460ff16611dad565b6110426040518060400160405280601f81526020017f46697273742063686f69636520766f746573206172726179206c656e67746800815250600b80549050612cd4565b61108a6040518060400160405280601e81526020017f4e756d626572206f662061637469766520766f74657273206c6566743a200000815250611085600c611d9f565b612cd4565b6000151560038054906101000a900460ff16151514156110eb576110e26040518060400160405280601281526020017f446973747269627574696e6720766f7465730000000000000000000000000000815250612d70565b6110ea612e09565b5b6111166040518060600160405280602d81526020016143b7602d91396111116005611d9f565b612cd4565b610fac565b5050565b6000600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000154116111a657336040517f098e625800000000000000000000000000000000000000000000000000000000815260040161119d9190613c4c565b60405180910390fd5b6000600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020604051806101000160405290816000820154815260200160018201805461120d90613e9d565b80601f016020809104026020016040519081016040528092919081815260200182805461123990613e9d565b80156112865780601f1061125b57610100808354040283529160200191611286565b820191906000526020600020905b81548152906001019060200180831161126957829003601f168201915b505050505081526020016002820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016003820180548060200260200160405190810160405280929190818152602001828054801561136a57602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311611320575b50505050508152602001600482015481526020016005820160009054906101000a900460ff161515151581526020016005820160019054906101000a900460ff161515151581526020016006820154815250509050600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008082016000905560018201600061141791906136c1565b6002820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff021916905560038201600061144e9190613701565b60048201600090556005820160006101000a81549060ff02191690556005820160016101000a81549060ff02191690556006820160009055505061149260056133df565b61149c600c6133df565b806040015173ffffffffffffffffffffffffffffffffffffffff1681602001516040516114c99190613e57565b604051809103902082600001517fca4cd4e7e4bac7a6adbcfcb5bcb9f3b106e667bbe038fbee3c5635c5fbd80ed260405160405180910390a450565b600960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600015156115383361066b565b1515141561157d57336040517f298693950000000000000000000000000000000000000000000000000000000081526004016115749190613c4c565b60405180910390fd5b6000600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000209050600015158160030160019054906101000a900460ff161515141561161b57336040517f4bb129810000000000000000000000000000000000000000000000000000000081526004016116129190613c4c565b60405180910390fd5b600115158160030160009054906101000a900460ff161515141561167657336040517f5c920d7000000000000000000000000000000000000000000000000000000000815260040161166d9190613c4c565b60405180910390fd5b600015156116838561029b565b151514156116c857836040517f098e62580000000000000000000000000000000000000000000000000000000081526004016116bf9190613c4c565b60405180910390fd5b600015156116d58461029b565b1515141561171a57826040517f098e62580000000000000000000000000000000000000000000000000000000081526004016117119190613c4c565b60405180910390fd5b600015156117278361029b565b1515141561176c57816040517f098e62580000000000000000000000000000000000000000000000000000000081526004016117639190613c4c565b60405180910390fd5b8273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1614806117d157508173ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16145b8061180757508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16145b1561184957336040517fe76703610000000000000000000000000000000000000000000000000000000081526004016118409190613c4c565b60405180910390fd5b6000600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020905080600301339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508060030180549050816004018190555080600160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008201548160000155600182018160010190805461195f90613e9d565b61196a929190613722565b506002820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168160020160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060038201816003019080546119e89291906137af565b50600482015481600401556005820160009054906101000a900460ff168160050160006101000a81548160ff0219169083151502179055506005820160019054906101000a900460ff168160050160016101000a81548160ff0219169083151502179055506006820154816006015590505081600201839080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555081600201849080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555081600201859080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060018260030160006101000a81548160ff02191690831515021790555081600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082015481600001556001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506002820181600201908054611c6d9291906137af565b506003820160009054906101000a900460ff168160030160006101000a81548160ff0219169083151502179055506003820160019054906101000a900460ff168160030160016101000a81548160ff0219169083151502179055506003820160029054906101000a900460ff168160030160026101000a81548160ff021916908315150217905550905050611d026008611d89565b8160010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1682600001547f1df7a981f2b7c2d90635bc06e912ebd86795304133dc9ed98317c89e8fdce36f84600201888888604051611d7a94939291906140b1565b60405180910390a35050505050565b6001816000016000828254019250508190555050565b600081600001549050919050565b611e458282604051602401611dc3929190614147565b6040516020818303038152906040527fc3b55635000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505061343b565b5050565b611e53600a611d89565b611e9b6040518060400160405280600781526020017f526f756e643a2000000000000000000000000000000000000000000000000000815250611e96600a611d9f565b612cd4565b600080829050611ee06040518060400160405280600b81526020017f48696768657374566f746500000000000000000000000000000000000000000081525083612cd4565b611f1f6040518060400160405280600a81526020017f4c6f77657374566f74650000000000000000000000000000000000000000000081525082612cd4565b611f5d6040518060400160405280600e81526020017f436f756e74696e6720766f746573000000000000000000000000000000000000815250612d70565b611fa56040518060400160405280601481526020017f4e756d626572206f662063616e64696461746573000000000000000000000000815250611fa06005611d9f565b612cd4565b60005b611fb26005611d9f565b811015612640576000808281548110611fce57611fcd614177565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600115156120088261029b565b1515141561262c576000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020604051806101000160405290816000820154815260200160018201805461207790613e9d565b80601f01602080910402602001604051908101604052809291908181526020018280546120a390613e9d565b80156120f05780601f106120c5576101008083540402835291602001916120f0565b820191906000526020600020905b8154815290600101906020018083116120d357829003601f168201915b505050505081526020016002820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600382018054806020026020016040519081016040528092919081815260200182805480156121d457602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001906001019080831161218a575b50505050508152602001600482015481526020016005820160009054906101000a900460ff161515151581526020016005820160019054906101000a900460ff1615151515815260200160068201548152505090506122686040518060400160405280601481526020017f436865636b696e672063616e6469646174653a2000000000000000000000000081525083613464565b6122ab6040518060400160405280601181526020017f4e756d626572206f6620766f7465733a200000000000000000000000000000008152508260800151612cd4565b60008160800151141561242c576122f76040518060400160405280601281526020017f44656c6574696e672063616e646964617465000000000000000000000000000081525083613464565b600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008082016000905560018201600061234f91906136c1565b6002820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690556003820160006123869190613701565b60048201600090556005820160006101000a81549060ff02191690556005820160016101000a81549060ff0219169055600682016000905550508173ffffffffffffffffffffffffffffffffffffffff167f20ac7292cd739ac1856c1820528eab26326d67d059c8c2655e5b0f74e50166cb8260800151612407600a611d9f565b6040516124159291906141a6565b60405180910390a2612427600c6133df565b61262a565b8581608001511061257e57806080015194508060400151600960006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060016003806101000a81548160ff0219169083151502179055506124fe6040518060400160405280600c81526020017f466f756e642077696e6e65720000000000000000000000000000000000000000815250600960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16613464565b600960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f184c045403d8187ed3db1ca9a17e22714163aac870f730230912e2b13199347386612563600a611d9f565b6040516125719291906141a6565b60405180910390a2612629565b838160800151116125d457806080015193506125cf6040518060400160405280601b81526020017f6c6f77657374566f746520616674657220636f6d70617269736f6e000000000081525085612cd4565b612628565b848160800151111561262757806080015194506126266040518060400160405280601c81526020017f68696768657374566f746520616674657220636f6d70617269736f6e0000000081525085612cd4565b5b5b5b5b505b508080612638906141cf565b915050611fa8565b506000151560038054906101000a900460ff1615151415612ccf5760005b6126686005611d9f565b811015612ccd57600080828154811061268457612683614177565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600115156126be8261029b565b15151415612cb9576000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020604051806101000160405290816000820154815260200160018201805461272d90613e9d565b80601f016020809104026020016040519081016040528092919081815260200182805461275990613e9d565b80156127a65780601f1061277b576101008083540402835291602001916127a6565b820191906000526020600020905b81548152906001019060200180831161278957829003601f168201915b505050505081526020016002820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016003820180548060200260200160405190810160405280929190818152602001828054801561288a57602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311612840575b50505050508152602001600482015481526020016005820160009054906101000a900460ff161515151581526020016005820160019054906101000a900460ff16151515158152602001600682015481525050905061291e6040518060400160405280601581526020017f5265636569766564206c6f7765737420766f746573000000000000000000000081525083613464565b8381608001511415612b625760018160a0019015159081151581525050806040015173ffffffffffffffffffffffffffffffffffffffff167fe95be246edc2ea46dd20ed4449a55fb30db02fa1d7360ff3b902fd4050bde8fe8260800151612986600a611d9f565b6040516129949291906141a6565b60405180910390a2600081608001511115612a8e5760005b8160800151811015612a8c57600b826060015182815181106129d1576129d0614177565b5b60200260200101519080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550612a796040518060600160405280602b81526020016143e4602b913983606001518381518110612a6c57612a6b614177565b5b6020026020010151613464565b8080612a84906141cf565b9150506129ac565b505b600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600080820160009055600182016000612ae691906136c1565b6002820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff0219169055600382016000612b1d9190613701565b60048201600090556005820160006101000a81549060ff02191690556005820160016101000a81549060ff021916905560068201600090555050612b61600c6133df565b5b6001612b6e600c611d9f565b1415612cb757806080015194508060400151600960006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060016003806101000a81548160ff021916908315150217905550612c3b6040518060400160405280600c81526020017f466f756e642077696e6e65720000000000000000000000000000000000000000815250600960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16613464565b600960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f184c045403d8187ed3db1ca9a17e22714163aac870f730230912e2b13199347386612ca0600a611d9f565b604051612cae9291906141a6565b60405180910390a25b505b508080612cc5906141cf565b91505061265e565b505b505050565b612d6c8282604051602401612cea929190614218565b6040516020818303038152906040527fb60e72cc000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505061343b565b5050565b612e0681604051602401612d849190614248565b6040516020818303038152906040527f41304fac000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505061343b565b50565b612e306040518060600160405280602c815260200161438b602c9139600b80549050612cd4565b60005b600b8054905081101561335a57600060026000600b8481548110612e5a57612e59614177565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000209050612f3e6040518060400160405280601281526020017f4469737472696275746520766f7465723a200000000000000000000000000000815250600b8481548110612f0e57612f0d614177565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16613464565b6000816002018054905011156133465780600201805480612f6257612f6161426a565b5b6001900381819060005260206000200160006101000a81549073ffffffffffffffffffffffffffffffffffffffff0219169055905560008160020180549050111561334557600060018260020180549050612fbd9190614299565b9050613008826002018281548110612fd857612fd7614177565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1661029b565b156133435760006001600084600201848154811061302957613028614177565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000209050806003018360010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550806003018054905081600401819055506131a86040518060400160405280601781526020017f43616e64696461746520726563656976656420766f746500000000000000000081525084600201848154811061317857613177614177565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16613464565b80600160008560020185815481106131c3576131c2614177565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008201548160000155600182018160010190805461324690613e9d565b613251929190613722565b506002820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168160020160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060038201816003019080546132cf9291906137af565b50600482015481600401556005820160009054906101000a900460ff168160050160006101000a81548160ff0219169083151502179055506005820160019054906101000a900460ff168160050160016101000a81548160ff02191690831515021790555060068201548160060155905050505b505b5b508080613352906141cf565b915050612e33565b505b6000600b8054905011156133b657600b80548061337c5761337b61426a565b5b6001900381819060005260206000200160006101000a81549073ffffffffffffffffffffffffffffffffffffffff0219169055905561335c565b6133dd60405180606001604052806021815260200161436a60219139600b80549050612cd4565b565b6000816000015490506000811161342b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161342290614319565b60405180910390fd5b6001810382600001819055505050565b60008151905060006a636f6e736f6c652e6c6f679050602083016000808483855afa5050505050565b6134fc828260405160240161347a929190614339565b6040516020818303038152906040527f319af333000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505061343b565b5050565b82805461350c90613e9d565b90600052602060002090601f01602090048101928261352e5760008555613575565b82601f1061354757805160ff1916838001178555613575565b82800160010185558215613575579182015b82811115613574578251825591602001919060010190613559565b5b5090506135829190613801565b5090565b8280548282559060005260206000209081019282156135ff579160200282015b828111156135fe5782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550916020019190600101906135a6565b5b50905061360c9190613801565b5090565b6040518060c0016040528060008152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001606081526020016000151581526020016000151581526020016000151581525090565b6040518061010001604052806000815260200160608152602001600073ffffffffffffffffffffffffffffffffffffffff1681526020016060815260200160008152602001600015158152602001600015158152602001600081525090565b5080546136cd90613e9d565b6000825580601f106136df57506136fe565b601f0160209004906000526020600020908101906136fd9190613801565b5b50565b508054600082559060005260206000209081019061371f9190613801565b50565b82805461372e90613e9d565b90600052602060002090601f016020900481019282613750576000855561379e565b82601f10613761578054855561379e565b8280016001018555821561379e57600052602060002091601f016020900482015b8281111561379d578254825591600101919060010190613782565b5b5090506137ab9190613801565b5090565b8280548282559060005260206000209081019282156137f05760005260206000209182015b828111156137ef5782548255916001019190600101906137d4565b5b5090506137fd9190613801565b5090565b5b8082111561381a576000816000905550600101613802565b5090565b6000604051905090565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061385d82613832565b9050919050565b61386d81613852565b811461387857600080fd5b50565b60008135905061388a81613864565b92915050565b6000602082840312156138a6576138a5613828565b5b60006138b48482850161387b565b91505092915050565b60008115159050919050565b6138d2816138bd565b82525050565b60006020820190506138ed60008301846138c9565b92915050565b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b613946826138fd565b810181811067ffffffffffffffff821117156139655761396461390e565b5b80604052505050565b600061397861381e565b9050613984828261393d565b919050565b600067ffffffffffffffff8211156139a4576139a361390e565b5b6139ad826138fd565b9050602081019050919050565b82818337600083830152505050565b60006139dc6139d784613989565b61396e565b9050828152602081018484840111156139f8576139f76138f8565b5b613a038482856139ba565b509392505050565b600082601f830112613a2057613a1f6138f3565b5b8135613a308482602086016139c9565b91505092915050565b600060208284031215613a4f57613a4e613828565b5b600082013567ffffffffffffffff811115613a6d57613a6c61382d565b5b613a7984828501613a0b565b91505092915050565b6000819050919050565b613a9581613a82565b82525050565b613aa481613852565b82525050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b6000613ae28383613a9b565b60208301905092915050565b6000602082019050919050565b6000613b0682613aaa565b613b108185613ab5565b9350613b1b83613ac6565b8060005b83811015613b4c578151613b338882613ad6565b9750613b3e83613aee565b925050600181019050613b1f565b5085935050505092915050565b613b62816138bd565b82525050565b600060c083016000830151613b806000860182613a8c565b506020830151613b936020860182613a9b565b5060408301518482036040860152613bab8282613afb565b9150506060830151613bc06060860182613b59565b506080830151613bd36080860182613b59565b5060a0830151613be660a0860182613b59565b508091505092915050565b60006020820190508181036000830152613c0b8184613b68565b905092915050565b613c1c81613a82565b82525050565b6000602082019050613c376000830184613c13565b92915050565b613c4681613852565b82525050565b6000602082019050613c616000830184613c3d565b92915050565b600081519050919050565b600082825260208201905092915050565b60005b83811015613ca1578082015181840152602081019050613c86565b83811115613cb0576000848401525b50505050565b6000613cc182613c67565b613ccb8185613c72565b9350613cdb818560208601613c83565b613ce4816138fd565b840191505092915050565b600061010083016000830151613d086000860182613a8c565b5060208301518482036020860152613d208282613cb6565b9150506040830151613d356040860182613a9b565b5060608301518482036060860152613d4d8282613afb565b9150506080830151613d626080860182613a8c565b5060a0830151613d7560a0860182613b59565b5060c0830151613d8860c0860182613b59565b5060e0830151613d9b60e0860182613a8c565b508091505092915050565b60006020820190508181036000830152613dc08184613cef565b905092915050565b600080600060608486031215613de157613de0613828565b5b6000613def8682870161387b565b9350506020613e008682870161387b565b9250506040613e118682870161387b565b9150509250925092565b600081905092915050565b6000613e3182613c67565b613e3b8185613e1b565b9350613e4b818560208601613c83565b80840191505092915050565b6000613e638284613e26565b915081905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680613eb557607f821691505b60208210811415613ec957613ec8613e6e565b5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000613f3882613a82565b9150613f4383613a82565b925082613f5357613f52613ecf565b5b828204905092915050565b6000613f6982613a82565b9150613f7483613a82565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115613fa957613fa8613efe565b5b828201905092915050565b600081549050919050565b600082825260208201905092915050565b60008190508160005260206000209050919050565b60008160001c9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061402561402083613fe5565b613ff2565b9050919050565b60006140388254614012565b9050919050565b6000600182019050919050565b600061405782613fb4565b6140618185613fbf565b935061406c83613fd0565b8060005b838110156140a4576140818261402c565b61408b8882613ad6565b97506140968361403f565b925050600181019050614070565b5085935050505092915050565b600060808201905081810360008301526140cb818761404c565b90506140da6020830186613c3d565b6140e76040830185613c3d565b6140f46060830184613c3d565b95945050505050565b600082825260208201905092915050565b600061411982613c67565b61412381856140fd565b9350614133818560208601613c83565b61413c816138fd565b840191505092915050565b60006040820190508181036000830152614161818561410e565b905061417060208301846138c9565b9392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60006040820190506141bb6000830185613c13565b6141c86020830184613c13565b9392505050565b60006141da82613a82565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82141561420d5761420c613efe565b5b600182019050919050565b60006040820190508181036000830152614232818561410e565b90506142416020830184613c13565b9392505050565b60006020820190508181036000830152614262818461410e565b905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fd5b60006142a482613a82565b91506142af83613a82565b9250828210156142c2576142c1613efe565b5b828203905092915050565b7f436f756e7465723a2064656372656d656e74206f766572666c6f770000000000600082015250565b6000614303601b836140fd565b915061430e826142cd565b602082019050919050565b60006020820190508181036000830152614332816142f6565b9050919050565b60006040820190508181036000830152614353818561410e565b90506143626020830184613c3d565b939250505056fe666972737443686f696365566f746572734164647265737365732e6c656e6774684e6f2077696e6e6572206c61737420726f756e6420736f2077696c6c206469737472696275746520766f74654e756d626572206f662063616e6469646174657320616674657220646973747269627574696e6720766f746573546865736520766f746572732077696c6c20676f20746f207468656972206e6578742063686f6963653a20697357696e6e65725069636b6564206265666f726520656e746572696e67207768696c65206c6f6f70697357696e6e65725069636b6564206265666f726520656e746572696e672064697374726962757465566f746573a2646970667358221220fc13e295cdd63a3082c292942724bace228b651fb849a32605a28bce47e7c84a64736f6c63430008090033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100ea5760003560e01c80638e7ea5b21161008c578063b647990a11610066578063b647990a1461024d578063d252142914610257578063dfbf53ae14610261578063f7610be01461027f576100ea565b80638e7ea5b2146101e15780639bcc3361146101ff578063ad25e8291461021d576100ea565b80634bdd7585116100c85780634bdd75851461016b5780637061bfcf1461019b5780637a84d13e146101b95780638b98e7b1146101d7576100ea565b8063193add06146100ef5780632b929d641461011f578063321a04891461013b575b600080fd5b61010960048036038101906101049190613890565b61029b565b60405161011691906138d8565b60405180910390f35b61013960048036038101906101349190613a39565b6102f7565b005b61015560048036038101906101509190613890565b61066b565b60405161016291906138d8565b60405180910390f35b61018560048036038101906101809190613890565b6106c7565b6040516101929190613bf1565b60405180910390f35b6101a36108e6565b6040516101b09190613c22565b60405180910390f35b6101c16108f2565b6040516101ce9190613c22565b60405180910390f35b6101df610903565b005b6101e9610c25565b6040516101f69190613c4c565b60405180910390f35b610207610c9a565b6040516102149190613c22565b60405180910390f35b61023760048036038101906102329190613890565b610ca6565b6040516102449190613da6565b60405180910390f35b610255610f51565b005b61025f61111f565b005b610269611505565b6040516102769190613c4c565b60405180910390f35b61029960048036038101906102949190613dc8565b61152b565b005b600080600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000154116102ed5760006102f0565b60015b9050919050565b6103003361029b565b1561034257336040517fa4a2360c0000000000000000000000000000000000000000000000000000000081526004016103399190613c4c565b60405180910390fd5b61034c6004611d89565b6103566005611d89565b610360600c611d89565b600061036c6004611d9f565b9050606060006040518061010001604052808481526020018581526020013373ffffffffffffffffffffffffffffffffffffffff168152602001838152602001600081526020016000151581526020016000151581526020016000815250905080600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082015181600001556020820151816001019080519060200190610432929190613500565b5060408201518160020160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506060820151816003019080519060200190610496929190613586565b506080820151816004015560a08201518160050160006101000a81548160ff02191690831515021790555060c08201518160050160016101000a81548160ff02191690831515021790555060e082015181600601559050506000339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550806040015173ffffffffffffffffffffffffffffffffffffffff16816020015160405161057e9190613e57565b604051809103902082600001517f548af351e0d3cac7bd58378a494326c2989919dca076c78773a389b714bfcbd160405160405180910390a46000600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600001541161066557610609610903565b6001600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060030160026101000a81548160ff0219169083151502179055505b50505050565b600080600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000154116106bd5760006106c0565b60015b9050919050565b6106cf613610565b6000600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600001541161075657816040517f2986939500000000000000000000000000000000000000000000000000000000815260040161074d9190613c4c565b60405180910390fd5b600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206040518060c0016040529081600082015481526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016002820180548060200260200160405190810160405280929190818152602001828054801561088557602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001906001019080831161083b575b505050505081526020016003820160009054906101000a900460ff161515151581526020016003820160019054906101000a900460ff161515151581526020016003820160029054906101000a900460ff1615151515815250509050919050565b60088060000154905081565b60006108fe6005611d9f565b905090565b61090c3361066b565b801561096b575060001515600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060030160029054906101000a900460ff161515145b156109ad57336040517fa7ebb3c20000000000000000000000000000000000000000000000000000000081526004016109a49190613c4c565b60405180910390fd5b6109b63361066b565b8015610a15575060011515600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060030160029054906101000a900460ff161515145b15610a5757336040517fa7ebb3c2000000000000000000000000000000000000000000000000000000008152600401610a4e9190613c4c565b60405180910390fd5b610a616006611d89565b610a6b6007611d89565b6000610a776006611d9f565b9050606060006040518060c001604052808481526020013373ffffffffffffffffffffffffffffffffffffffff16815260200183815260200160001515815260200160011515815260200160001515815250905080600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000820151816000015560208201518160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506040820151816002019080519060200190610b78929190613586565b5060608201518160030160006101000a81548160ff02191690831515021790555060808201518160030160016101000a81548160ff02191690831515021790555060a08201518160030160026101000a81548160ff0219169083151502179055509050503373ffffffffffffffffffffffffffffffffffffffff16837ff45b8429c36d478f9a6d081c4811a819b98aa5b608588bed9d406405cf28247360405160405180910390a3505050565b600080151560038054906101000a900460ff1615151415610c72576040517f944558c800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60078060000154905081565b610cae613662565b6000600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000015411610d3557816040517f098e6258000000000000000000000000000000000000000000000000000000008152600401610d2c9190613c4c565b60405180910390fd5b600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206040518061010001604052908160008201548152602001600182018054610d9a90613e9d565b80601f0160208091040260200160405190810160405280929190818152602001828054610dc690613e9d565b8015610e135780601f10610de857610100808354040283529160200191610e13565b820191906000526020600020905b815481529060010190602001808311610df657829003601f168201915b505050505081526020016002820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200160038201805480602002602001604051908101604052809291908181526020018280548015610ef757602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311610ead575b50505050508152602001600482015481526020016005820160009054906101000a900460ff161515151581526020016005820160019054906101000a900460ff161515151581526020016006820154815250509050919050565b6000610f5d6008611d9f565b905060006001600283610f709190613f2d565b610f7a9190613f5e565b9050610fab60405180606001604052806029815260200161440f6029913960038054906101000a900460ff16611dad565b5b6000151560038054906101000a900460ff161515141561111b57610fcf81611e49565b610ffe6040518060600160405280602e8152602001614438602e913960038054906101000a900460ff16611dad565b6110426040518060400160405280601f81526020017f46697273742063686f69636520766f746573206172726179206c656e67746800815250600b80549050612cd4565b61108a6040518060400160405280601e81526020017f4e756d626572206f662061637469766520766f74657273206c6566743a200000815250611085600c611d9f565b612cd4565b6000151560038054906101000a900460ff16151514156110eb576110e26040518060400160405280601281526020017f446973747269627574696e6720766f7465730000000000000000000000000000815250612d70565b6110ea612e09565b5b6111166040518060600160405280602d81526020016143b7602d91396111116005611d9f565b612cd4565b610fac565b5050565b6000600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000154116111a657336040517f098e625800000000000000000000000000000000000000000000000000000000815260040161119d9190613c4c565b60405180910390fd5b6000600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020604051806101000160405290816000820154815260200160018201805461120d90613e9d565b80601f016020809104026020016040519081016040528092919081815260200182805461123990613e9d565b80156112865780601f1061125b57610100808354040283529160200191611286565b820191906000526020600020905b81548152906001019060200180831161126957829003601f168201915b505050505081526020016002820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016003820180548060200260200160405190810160405280929190818152602001828054801561136a57602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311611320575b50505050508152602001600482015481526020016005820160009054906101000a900460ff161515151581526020016005820160019054906101000a900460ff161515151581526020016006820154815250509050600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008082016000905560018201600061141791906136c1565b6002820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff021916905560038201600061144e9190613701565b60048201600090556005820160006101000a81549060ff02191690556005820160016101000a81549060ff02191690556006820160009055505061149260056133df565b61149c600c6133df565b806040015173ffffffffffffffffffffffffffffffffffffffff1681602001516040516114c99190613e57565b604051809103902082600001517fca4cd4e7e4bac7a6adbcfcb5bcb9f3b106e667bbe038fbee3c5635c5fbd80ed260405160405180910390a450565b600960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600015156115383361066b565b1515141561157d57336040517f298693950000000000000000000000000000000000000000000000000000000081526004016115749190613c4c565b60405180910390fd5b6000600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000209050600015158160030160019054906101000a900460ff161515141561161b57336040517f4bb129810000000000000000000000000000000000000000000000000000000081526004016116129190613c4c565b60405180910390fd5b600115158160030160009054906101000a900460ff161515141561167657336040517f5c920d7000000000000000000000000000000000000000000000000000000000815260040161166d9190613c4c565b60405180910390fd5b600015156116838561029b565b151514156116c857836040517f098e62580000000000000000000000000000000000000000000000000000000081526004016116bf9190613c4c565b60405180910390fd5b600015156116d58461029b565b1515141561171a57826040517f098e62580000000000000000000000000000000000000000000000000000000081526004016117119190613c4c565b60405180910390fd5b600015156117278361029b565b1515141561176c57816040517f098e62580000000000000000000000000000000000000000000000000000000081526004016117639190613c4c565b60405180910390fd5b8273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1614806117d157508173ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16145b8061180757508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16145b1561184957336040517fe76703610000000000000000000000000000000000000000000000000000000081526004016118409190613c4c565b60405180910390fd5b6000600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020905080600301339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508060030180549050816004018190555080600160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008201548160000155600182018160010190805461195f90613e9d565b61196a929190613722565b506002820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168160020160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060038201816003019080546119e89291906137af565b50600482015481600401556005820160009054906101000a900460ff168160050160006101000a81548160ff0219169083151502179055506005820160019054906101000a900460ff168160050160016101000a81548160ff0219169083151502179055506006820154816006015590505081600201839080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555081600201849080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555081600201859080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060018260030160006101000a81548160ff02191690831515021790555081600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082015481600001556001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506002820181600201908054611c6d9291906137af565b506003820160009054906101000a900460ff168160030160006101000a81548160ff0219169083151502179055506003820160019054906101000a900460ff168160030160016101000a81548160ff0219169083151502179055506003820160029054906101000a900460ff168160030160026101000a81548160ff021916908315150217905550905050611d026008611d89565b8160010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1682600001547f1df7a981f2b7c2d90635bc06e912ebd86795304133dc9ed98317c89e8fdce36f84600201888888604051611d7a94939291906140b1565b60405180910390a35050505050565b6001816000016000828254019250508190555050565b600081600001549050919050565b611e458282604051602401611dc3929190614147565b6040516020818303038152906040527fc3b55635000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505061343b565b5050565b611e53600a611d89565b611e9b6040518060400160405280600781526020017f526f756e643a2000000000000000000000000000000000000000000000000000815250611e96600a611d9f565b612cd4565b600080829050611ee06040518060400160405280600b81526020017f48696768657374566f746500000000000000000000000000000000000000000081525083612cd4565b611f1f6040518060400160405280600a81526020017f4c6f77657374566f74650000000000000000000000000000000000000000000081525082612cd4565b611f5d6040518060400160405280600e81526020017f436f756e74696e6720766f746573000000000000000000000000000000000000815250612d70565b611fa56040518060400160405280601481526020017f4e756d626572206f662063616e64696461746573000000000000000000000000815250611fa06005611d9f565b612cd4565b60005b611fb26005611d9f565b811015612640576000808281548110611fce57611fcd614177565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600115156120088261029b565b1515141561262c576000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020604051806101000160405290816000820154815260200160018201805461207790613e9d565b80601f01602080910402602001604051908101604052809291908181526020018280546120a390613e9d565b80156120f05780601f106120c5576101008083540402835291602001916120f0565b820191906000526020600020905b8154815290600101906020018083116120d357829003601f168201915b505050505081526020016002820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600382018054806020026020016040519081016040528092919081815260200182805480156121d457602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001906001019080831161218a575b50505050508152602001600482015481526020016005820160009054906101000a900460ff161515151581526020016005820160019054906101000a900460ff1615151515815260200160068201548152505090506122686040518060400160405280601481526020017f436865636b696e672063616e6469646174653a2000000000000000000000000081525083613464565b6122ab6040518060400160405280601181526020017f4e756d626572206f6620766f7465733a200000000000000000000000000000008152508260800151612cd4565b60008160800151141561242c576122f76040518060400160405280601281526020017f44656c6574696e672063616e646964617465000000000000000000000000000081525083613464565b600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008082016000905560018201600061234f91906136c1565b6002820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690556003820160006123869190613701565b60048201600090556005820160006101000a81549060ff02191690556005820160016101000a81549060ff0219169055600682016000905550508173ffffffffffffffffffffffffffffffffffffffff167f20ac7292cd739ac1856c1820528eab26326d67d059c8c2655e5b0f74e50166cb8260800151612407600a611d9f565b6040516124159291906141a6565b60405180910390a2612427600c6133df565b61262a565b8581608001511061257e57806080015194508060400151600960006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060016003806101000a81548160ff0219169083151502179055506124fe6040518060400160405280600c81526020017f466f756e642077696e6e65720000000000000000000000000000000000000000815250600960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16613464565b600960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f184c045403d8187ed3db1ca9a17e22714163aac870f730230912e2b13199347386612563600a611d9f565b6040516125719291906141a6565b60405180910390a2612629565b838160800151116125d457806080015193506125cf6040518060400160405280601b81526020017f6c6f77657374566f746520616674657220636f6d70617269736f6e000000000081525085612cd4565b612628565b848160800151111561262757806080015194506126266040518060400160405280601c81526020017f68696768657374566f746520616674657220636f6d70617269736f6e0000000081525085612cd4565b5b5b5b5b505b508080612638906141cf565b915050611fa8565b506000151560038054906101000a900460ff1615151415612ccf5760005b6126686005611d9f565b811015612ccd57600080828154811061268457612683614177565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600115156126be8261029b565b15151415612cb9576000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020604051806101000160405290816000820154815260200160018201805461272d90613e9d565b80601f016020809104026020016040519081016040528092919081815260200182805461275990613e9d565b80156127a65780601f1061277b576101008083540402835291602001916127a6565b820191906000526020600020905b81548152906001019060200180831161278957829003601f168201915b505050505081526020016002820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016003820180548060200260200160405190810160405280929190818152602001828054801561288a57602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311612840575b50505050508152602001600482015481526020016005820160009054906101000a900460ff161515151581526020016005820160019054906101000a900460ff16151515158152602001600682015481525050905061291e6040518060400160405280601581526020017f5265636569766564206c6f7765737420766f746573000000000000000000000081525083613464565b8381608001511415612b625760018160a0019015159081151581525050806040015173ffffffffffffffffffffffffffffffffffffffff167fe95be246edc2ea46dd20ed4449a55fb30db02fa1d7360ff3b902fd4050bde8fe8260800151612986600a611d9f565b6040516129949291906141a6565b60405180910390a2600081608001511115612a8e5760005b8160800151811015612a8c57600b826060015182815181106129d1576129d0614177565b5b60200260200101519080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550612a796040518060600160405280602b81526020016143e4602b913983606001518381518110612a6c57612a6b614177565b5b6020026020010151613464565b8080612a84906141cf565b9150506129ac565b505b600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600080820160009055600182016000612ae691906136c1565b6002820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff0219169055600382016000612b1d9190613701565b60048201600090556005820160006101000a81549060ff02191690556005820160016101000a81549060ff021916905560068201600090555050612b61600c6133df565b5b6001612b6e600c611d9f565b1415612cb757806080015194508060400151600960006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060016003806101000a81548160ff021916908315150217905550612c3b6040518060400160405280600c81526020017f466f756e642077696e6e65720000000000000000000000000000000000000000815250600960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16613464565b600960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f184c045403d8187ed3db1ca9a17e22714163aac870f730230912e2b13199347386612ca0600a611d9f565b604051612cae9291906141a6565b60405180910390a25b505b508080612cc5906141cf565b91505061265e565b505b505050565b612d6c8282604051602401612cea929190614218565b6040516020818303038152906040527fb60e72cc000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505061343b565b5050565b612e0681604051602401612d849190614248565b6040516020818303038152906040527f41304fac000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505061343b565b50565b612e306040518060600160405280602c815260200161438b602c9139600b80549050612cd4565b60005b600b8054905081101561335a57600060026000600b8481548110612e5a57612e59614177565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000209050612f3e6040518060400160405280601281526020017f4469737472696275746520766f7465723a200000000000000000000000000000815250600b8481548110612f0e57612f0d614177565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16613464565b6000816002018054905011156133465780600201805480612f6257612f6161426a565b5b6001900381819060005260206000200160006101000a81549073ffffffffffffffffffffffffffffffffffffffff0219169055905560008160020180549050111561334557600060018260020180549050612fbd9190614299565b9050613008826002018281548110612fd857612fd7614177565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1661029b565b156133435760006001600084600201848154811061302957613028614177565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000209050806003018360010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550806003018054905081600401819055506131a86040518060400160405280601781526020017f43616e64696461746520726563656976656420766f746500000000000000000081525084600201848154811061317857613177614177565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16613464565b80600160008560020185815481106131c3576131c2614177565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008201548160000155600182018160010190805461324690613e9d565b613251929190613722565b506002820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168160020160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060038201816003019080546132cf9291906137af565b50600482015481600401556005820160009054906101000a900460ff168160050160006101000a81548160ff0219169083151502179055506005820160019054906101000a900460ff168160050160016101000a81548160ff02191690831515021790555060068201548160060155905050505b505b5b508080613352906141cf565b915050612e33565b505b6000600b8054905011156133b657600b80548061337c5761337b61426a565b5b6001900381819060005260206000200160006101000a81549073ffffffffffffffffffffffffffffffffffffffff0219169055905561335c565b6133dd60405180606001604052806021815260200161436a60219139600b80549050612cd4565b565b6000816000015490506000811161342b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161342290614319565b60405180910390fd5b6001810382600001819055505050565b60008151905060006a636f6e736f6c652e6c6f679050602083016000808483855afa5050505050565b6134fc828260405160240161347a929190614339565b6040516020818303038152906040527f319af333000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505061343b565b5050565b82805461350c90613e9d565b90600052602060002090601f01602090048101928261352e5760008555613575565b82601f1061354757805160ff1916838001178555613575565b82800160010185558215613575579182015b82811115613574578251825591602001919060010190613559565b5b5090506135829190613801565b5090565b8280548282559060005260206000209081019282156135ff579160200282015b828111156135fe5782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550916020019190600101906135a6565b5b50905061360c9190613801565b5090565b6040518060c0016040528060008152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001606081526020016000151581526020016000151581526020016000151581525090565b6040518061010001604052806000815260200160608152602001600073ffffffffffffffffffffffffffffffffffffffff1681526020016060815260200160008152602001600015158152602001600015158152602001600081525090565b5080546136cd90613e9d565b6000825580601f106136df57506136fe565b601f0160209004906000526020600020908101906136fd9190613801565b5b50565b508054600082559060005260206000209081019061371f9190613801565b50565b82805461372e90613e9d565b90600052602060002090601f016020900481019282613750576000855561379e565b82601f10613761578054855561379e565b8280016001018555821561379e57600052602060002091601f016020900482015b8281111561379d578254825591600101919060010190613782565b5b5090506137ab9190613801565b5090565b8280548282559060005260206000209081019282156137f05760005260206000209182015b828111156137ef5782548255916001019190600101906137d4565b5b5090506137fd9190613801565b5090565b5b8082111561381a576000816000905550600101613802565b5090565b6000604051905090565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061385d82613832565b9050919050565b61386d81613852565b811461387857600080fd5b50565b60008135905061388a81613864565b92915050565b6000602082840312156138a6576138a5613828565b5b60006138b48482850161387b565b91505092915050565b60008115159050919050565b6138d2816138bd565b82525050565b60006020820190506138ed60008301846138c9565b92915050565b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b613946826138fd565b810181811067ffffffffffffffff821117156139655761396461390e565b5b80604052505050565b600061397861381e565b9050613984828261393d565b919050565b600067ffffffffffffffff8211156139a4576139a361390e565b5b6139ad826138fd565b9050602081019050919050565b82818337600083830152505050565b60006139dc6139d784613989565b61396e565b9050828152602081018484840111156139f8576139f76138f8565b5b613a038482856139ba565b509392505050565b600082601f830112613a2057613a1f6138f3565b5b8135613a308482602086016139c9565b91505092915050565b600060208284031215613a4f57613a4e613828565b5b600082013567ffffffffffffffff811115613a6d57613a6c61382d565b5b613a7984828501613a0b565b91505092915050565b6000819050919050565b613a9581613a82565b82525050565b613aa481613852565b82525050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b6000613ae28383613a9b565b60208301905092915050565b6000602082019050919050565b6000613b0682613aaa565b613b108185613ab5565b9350613b1b83613ac6565b8060005b83811015613b4c578151613b338882613ad6565b9750613b3e83613aee565b925050600181019050613b1f565b5085935050505092915050565b613b62816138bd565b82525050565b600060c083016000830151613b806000860182613a8c565b506020830151613b936020860182613a9b565b5060408301518482036040860152613bab8282613afb565b9150506060830151613bc06060860182613b59565b506080830151613bd36080860182613b59565b5060a0830151613be660a0860182613b59565b508091505092915050565b60006020820190508181036000830152613c0b8184613b68565b905092915050565b613c1c81613a82565b82525050565b6000602082019050613c376000830184613c13565b92915050565b613c4681613852565b82525050565b6000602082019050613c616000830184613c3d565b92915050565b600081519050919050565b600082825260208201905092915050565b60005b83811015613ca1578082015181840152602081019050613c86565b83811115613cb0576000848401525b50505050565b6000613cc182613c67565b613ccb8185613c72565b9350613cdb818560208601613c83565b613ce4816138fd565b840191505092915050565b600061010083016000830151613d086000860182613a8c565b5060208301518482036020860152613d208282613cb6565b9150506040830151613d356040860182613a9b565b5060608301518482036060860152613d4d8282613afb565b9150506080830151613d626080860182613a8c565b5060a0830151613d7560a0860182613b59565b5060c0830151613d8860c0860182613b59565b5060e0830151613d9b60e0860182613a8c565b508091505092915050565b60006020820190508181036000830152613dc08184613cef565b905092915050565b600080600060608486031215613de157613de0613828565b5b6000613def8682870161387b565b9350506020613e008682870161387b565b9250506040613e118682870161387b565b9150509250925092565b600081905092915050565b6000613e3182613c67565b613e3b8185613e1b565b9350613e4b818560208601613c83565b80840191505092915050565b6000613e638284613e26565b915081905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680613eb557607f821691505b60208210811415613ec957613ec8613e6e565b5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000613f3882613a82565b9150613f4383613a82565b925082613f5357613f52613ecf565b5b828204905092915050565b6000613f6982613a82565b9150613f7483613a82565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115613fa957613fa8613efe565b5b828201905092915050565b600081549050919050565b600082825260208201905092915050565b60008190508160005260206000209050919050565b60008160001c9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061402561402083613fe5565b613ff2565b9050919050565b60006140388254614012565b9050919050565b6000600182019050919050565b600061405782613fb4565b6140618185613fbf565b935061406c83613fd0565b8060005b838110156140a4576140818261402c565b61408b8882613ad6565b97506140968361403f565b925050600181019050614070565b5085935050505092915050565b600060808201905081810360008301526140cb818761404c565b90506140da6020830186613c3d565b6140e76040830185613c3d565b6140f46060830184613c3d565b95945050505050565b600082825260208201905092915050565b600061411982613c67565b61412381856140fd565b9350614133818560208601613c83565b61413c816138fd565b840191505092915050565b60006040820190508181036000830152614161818561410e565b905061417060208301846138c9565b9392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60006040820190506141bb6000830185613c13565b6141c86020830184613c13565b9392505050565b60006141da82613a82565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82141561420d5761420c613efe565b5b600182019050919050565b60006040820190508181036000830152614232818561410e565b90506142416020830184613c13565b9392505050565b60006020820190508181036000830152614262818461410e565b905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fd5b60006142a482613a82565b91506142af83613a82565b9250828210156142c2576142c1613efe565b5b828203905092915050565b7f436f756e7465723a2064656372656d656e74206f766572666c6f770000000000600082015250565b6000614303601b836140fd565b915061430e826142cd565b602082019050919050565b60006020820190508181036000830152614332816142f6565b9050919050565b60006040820190508181036000830152614353818561410e565b90506143626020830184613c3d565b939250505056fe666972737443686f696365566f746572734164647265737365732e6c656e6774684e6f2077696e6e6572206c61737420726f756e6420736f2077696c6c206469737472696275746520766f74654e756d626572206f662063616e6469646174657320616674657220646973747269627574696e6720766f746573546865736520766f746572732077696c6c20676f20746f207468656972206e6578742063686f6963653a20697357696e6e65725069636b6564206265666f726520656e746572696e67207768696c65206c6f6f70697357696e6e65725069636b6564206265666f726520656e746572696e672064697374726962757465566f746573a2646970667358221220fc13e295cdd63a3082c292942724bace228b651fb849a32605a28bce47e7c84a64736f6c63430008090033",
  "devdoc": {
    "author": "Kent Miguel",
    "details": "uses chainlink automation to end register, voting, and count phases",
    "kind": "dev",
    "methods": {
      "countVotes()": {
        "details": "see pointer below: 1. If a candidate has >= 50% of the votes + 1 then he/she is the winner 2. ...if no winner in round 1, go to the next round and distribute the 2nc choice of the 1st choice voters of the eliminated candidate(s) 3. count again"
      },
      "enterCandidate(string)": {
        "details": "will be registered to vote automatically and will be disabled when register phase is over",
        "params": {
          "_candidateName": "The name of the candidate"
        }
      },
      "registerToVote()": {
        "details": "1. users who enter as a candidate will be registered automatically, will be disabled at the end of phase 1 2. Optimize this by accessing struct once and store it in a local variable and use that for the checks.. see coverage first and gas viewer"
      },
      "vote(address,address,address)": {
        "details": "come back to implement checks: 1. phase switches 2. flags: isRegistered, hasVoted 3. Update points for candidate structs"
      },
      "withdrawCandidate()": {
        "details": "checks:      1 . disabled when register phase is over      2. check that person who registered are only the one who can withdraw      3. check that cannot withdraw if entry does not exist"
      }
    },
    "title": "A Ranked Choice Voting Smart Contract",
    "version": 1
  },
  "userdoc": {
    "errors": {
      "Voting_CandidateAlreadyExists(address)": [
        {
          "notice": "Errors ///"
        }
      ]
    },
    "kind": "user",
    "methods": {
      "countVotes()": {
        "notice": "this function calculates the votes to get the winner"
      },
      "enterCandidate(string)": {
        "notice": "this functions registers candidates"
      },
      "getCandidateByAddress(address)": {
        "notice": "Getter functions ///"
      },
      "registerToVote()": {
        "notice": "this function register voters to vote for phase 2: Voting"
      },
      "vote(address,address,address)": {
        "notice": "this function allows voters to vote their choices in the election"
      },
      "winner()": {
        "notice": "phase 3 variables"
      },
      "withdrawCandidate()": {
        "notice": "withdraws from election"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 221,
        "contract": "contracts/RankedChoiceContract.sol:RankedChoiceContract",
        "label": "candidateAddresses",
        "offset": 0,
        "slot": "0",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 226,
        "contract": "contracts/RankedChoiceContract.sol:RankedChoiceContract",
        "label": "addressToCandidate",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_struct(Candidate)204_storage)"
      },
      {
        "astId": 231,
        "contract": "contracts/RankedChoiceContract.sol:RankedChoiceContract",
        "label": "registeredVoters",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_struct(Voter)218_storage)"
      },
      {
        "astId": 234,
        "contract": "contracts/RankedChoiceContract.sol:RankedChoiceContract",
        "label": "phaseOneSwitch",
        "offset": 0,
        "slot": "3",
        "type": "t_bool"
      },
      {
        "astId": 236,
        "contract": "contracts/RankedChoiceContract.sol:RankedChoiceContract",
        "label": "phaseTwoSwitch",
        "offset": 1,
        "slot": "3",
        "type": "t_bool"
      },
      {
        "astId": 238,
        "contract": "contracts/RankedChoiceContract.sol:RankedChoiceContract",
        "label": "phaseThreeSwitch",
        "offset": 2,
        "slot": "3",
        "type": "t_bool"
      },
      {
        "astId": 240,
        "contract": "contracts/RankedChoiceContract.sol:RankedChoiceContract",
        "label": "isWinnerPicked",
        "offset": 3,
        "slot": "3",
        "type": "t_bool"
      },
      {
        "astId": 243,
        "contract": "contracts/RankedChoiceContract.sol:RankedChoiceContract",
        "label": "candidateIdCounter",
        "offset": 0,
        "slot": "4",
        "type": "t_struct(Counter)5_storage"
      },
      {
        "astId": 246,
        "contract": "contracts/RankedChoiceContract.sol:RankedChoiceContract",
        "label": "numberOfCandidates",
        "offset": 0,
        "slot": "5",
        "type": "t_struct(Counter)5_storage"
      },
      {
        "astId": 249,
        "contract": "contracts/RankedChoiceContract.sol:RankedChoiceContract",
        "label": "voterIdCounter",
        "offset": 0,
        "slot": "6",
        "type": "t_struct(Counter)5_storage"
      },
      {
        "astId": 252,
        "contract": "contracts/RankedChoiceContract.sol:RankedChoiceContract",
        "label": "numberOfVoters",
        "offset": 0,
        "slot": "7",
        "type": "t_struct(Counter)5_storage"
      },
      {
        "astId": 255,
        "contract": "contracts/RankedChoiceContract.sol:RankedChoiceContract",
        "label": "numberOfVotersVoted",
        "offset": 0,
        "slot": "8",
        "type": "t_struct(Counter)5_storage"
      },
      {
        "astId": 267,
        "contract": "contracts/RankedChoiceContract.sol:RankedChoiceContract",
        "label": "winner",
        "offset": 0,
        "slot": "9",
        "type": "t_address"
      },
      {
        "astId": 270,
        "contract": "contracts/RankedChoiceContract.sol:RankedChoiceContract",
        "label": "round",
        "offset": 0,
        "slot": "10",
        "type": "t_struct(Counter)5_storage"
      },
      {
        "astId": 273,
        "contract": "contracts/RankedChoiceContract.sol:RankedChoiceContract",
        "label": "firstChoiceVotersAddresses",
        "offset": 0,
        "slot": "11",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 276,
        "contract": "contracts/RankedChoiceContract.sol:RankedChoiceContract",
        "label": "activeCandidatesCounter",
        "offset": 0,
        "slot": "12",
        "type": "t_struct(Counter)5_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_struct(Candidate)204_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct RankedChoiceContract.Candidate)",
        "numberOfBytes": "32",
        "value": "t_struct(Candidate)204_storage"
      },
      "t_mapping(t_address,t_struct(Voter)218_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct RankedChoiceContract.Voter)",
        "numberOfBytes": "32",
        "value": "t_struct(Voter)218_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Candidate)204_storage": {
        "encoding": "inplace",
        "label": "struct RankedChoiceContract.Candidate",
        "members": [
          {
            "astId": 188,
            "contract": "contracts/RankedChoiceContract.sol:RankedChoiceContract",
            "label": "id",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 190,
            "contract": "contracts/RankedChoiceContract.sol:RankedChoiceContract",
            "label": "name",
            "offset": 0,
            "slot": "1",
            "type": "t_string_storage"
          },
          {
            "astId": 192,
            "contract": "contracts/RankedChoiceContract.sol:RankedChoiceContract",
            "label": "walletAddress",
            "offset": 0,
            "slot": "2",
            "type": "t_address"
          },
          {
            "astId": 195,
            "contract": "contracts/RankedChoiceContract.sol:RankedChoiceContract",
            "label": "firstChoiceVoters",
            "offset": 0,
            "slot": "3",
            "type": "t_array(t_address)dyn_storage"
          },
          {
            "astId": 197,
            "contract": "contracts/RankedChoiceContract.sol:RankedChoiceContract",
            "label": "firstVotesCount",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 199,
            "contract": "contracts/RankedChoiceContract.sol:RankedChoiceContract",
            "label": "isEliminated",
            "offset": 0,
            "slot": "5",
            "type": "t_bool"
          },
          {
            "astId": 201,
            "contract": "contracts/RankedChoiceContract.sol:RankedChoiceContract",
            "label": "isWinner",
            "offset": 1,
            "slot": "5",
            "type": "t_bool"
          },
          {
            "astId": 203,
            "contract": "contracts/RankedChoiceContract.sol:RankedChoiceContract",
            "label": "totalVotesCount",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "224"
      },
      "t_struct(Counter)5_storage": {
        "encoding": "inplace",
        "label": "struct Counters.Counter",
        "members": [
          {
            "astId": 4,
            "contract": "contracts/RankedChoiceContract.sol:RankedChoiceContract",
            "label": "_value",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(Voter)218_storage": {
        "encoding": "inplace",
        "label": "struct RankedChoiceContract.Voter",
        "members": [
          {
            "astId": 206,
            "contract": "contracts/RankedChoiceContract.sol:RankedChoiceContract",
            "label": "voterId",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 208,
            "contract": "contracts/RankedChoiceContract.sol:RankedChoiceContract",
            "label": "walletAddress",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 211,
            "contract": "contracts/RankedChoiceContract.sol:RankedChoiceContract",
            "label": "voterChoices",
            "offset": 0,
            "slot": "2",
            "type": "t_array(t_address)dyn_storage"
          },
          {
            "astId": 213,
            "contract": "contracts/RankedChoiceContract.sol:RankedChoiceContract",
            "label": "hasVoted",
            "offset": 0,
            "slot": "3",
            "type": "t_bool"
          },
          {
            "astId": 215,
            "contract": "contracts/RankedChoiceContract.sol:RankedChoiceContract",
            "label": "isRegistered",
            "offset": 1,
            "slot": "3",
            "type": "t_bool"
          },
          {
            "astId": 217,
            "contract": "contracts/RankedChoiceContract.sol:RankedChoiceContract",
            "label": "isCandidate",
            "offset": 2,
            "slot": "3",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}